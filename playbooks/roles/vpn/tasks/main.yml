---
- name: Update repositories cache and install packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} update_cache=yes cache_valid_time=3600 state=present
  with_items:
    - openvpn
    - iptables
    - iptables-persistent
  register: apt_install_task

- name: Check if there is a CRL file in "{{ minidc_working_directory }}/{{ ca_server }}{{ hostvars[ca_server]['ca_easy_rsa_install_dir'] }}/keys"
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ ca_server }}{{ hostvars[ca_server]['ca_easy_rsa_install_dir'] }}/keys/crl.pem"
  register: stat_crl_pem_task

- name: Copy the CRL file
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_server }}/{{ hostvars[ca_server]['ca_easy_rsa_install_dir'] }}/keys/crl.pem"
    dest: /etc/openvpn/crl.pem
    owner: root
    group: root
    mode: 0644
  when:
    - stat_crl_pem_task.stat.exists is defined
    - stat_crl_pem_task.stat.exists

- name: Generate "/etc/openvpn/server.conf"
  template:
    src: "{{ role_path }}/templates/main_server.conf.j2"
    dest: /etc/openvpn/server.conf
    owner: root
    group: root
    mode: 0644
  register: modify_etc_openvpn_server_conf_task

- name: Generate 'client.conf' for each client in "{{ minidc_working_directory }}/{{ ca_server }}{{ hostvars[ca_server]['ca_easy_rsa_install_dir'] }}/keys"
  local_action:
    module: template
    src: "{{ role_path }}/templates/main_client.conf.j2"
    dest: "{{ minidc_working_directory }}/{{ ca_server }}{{ hostvars[ca_server]['ca_easy_rsa_install_dir'] }}/{{ item }}.ovpn"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ hostvars[ca_server]['ca_certificates']['clients'] }}"

- name: Copy server certificates and keys
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_server }}/{{ hostvars[ca_server]['ca_easy_rsa_install_dir'] }}/keys/{{ item.0 }}"
    dest: "{{ item.1 }}/{{ item.0 }}"
    owner: root
    group: root
    mode: "{{ item.2 }}"
  with_together:
  - ["{{ ca_cert_file }}", "{{ vpn_server_url }}.crt", "{{ vpn_server_url }}.key", "dh{{ hostvars[ca_server]['ca_key_size'] }}.pem"]
  - ["{{ ca_cert_dir }}" , "{{ ca_cert_dir }}"       , "{{ ca_private_dir }}"    , "{{ ca_private_dir }}"]
  - ["0644"              , "0644"                    , "0600"                    , "0600"]
  register: copy_server_certs_and_keys_task

# Only necessary for bridged mode, not used for the moment, maybe will come in a future version
- name: Copy unit file "/etc/systemd/system/promiscuous@.service" for promiscuous@ service
  copy:
    src: "{{ role_path }}/files/main_promiscuous@.service"
    dest: /etc/systemd/system/promiscuous@.service
    owner: root
    group: root
    mode: 0644
# After this, need to :
# - enable and daemon-reload the promiscuous service

- name: Copy "/etc/rsyslog.d/01-openvpn.conf"
  copy:
    src: "{{ role_path }}/files/main_01-openvpn.conf"
    dest: /etc/rsyslog.d/01-openvpn.conf
    owner: root
    group: root
    mode: 0644
  register: copy_rsyslog_openvpn_conf

- name: Restart "rsyslog" service if needed
  systemd:
    name: rsyslog
    state: restarted
  when:
  - copy_rsyslog_openvpn_conf.changed

- name: Copy "/etc/logrotate.d/openvpn"
  copy:
    src: "{{ role_path }}/files/main_openvpn"
    dest: /etc/logrotate.d/openvpn
    owner: root
    group: root
    mode: 0644

- name: Be sure the directory "/etc/systemd/system/openvpn@server.service.d" exists
  file:
    path: /etc/systemd/system/openvpn@server.service.d
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Copy "/etc/systemd/system/openvpn@server.service.d/override.conf"
  copy:
    src: "{{ role_path }}/files/main_override.conf"
    dest: /etc/systemd/system/openvpn@server.service.d/override.conf
    owner: root
    group: root
    mode: 0644

- name: Start openvpn@server service
  systemd:
    name: openvpn@server
    state: started
    enabled: yes
    daemon_reload: yes

- name: Allow kernel to forward incoming IPv4 traffic
  sysctl:
    sysctl_file: /etc/sysctl.d/99-sysctl.conf
    name: 'net.ipv4.ip_forward'
    value: 1
    sysctl_set: yes
    state: present
    reload: yes

- name: Generate "/etc/iptables/rules.v4"
  template:
    src: "{{ role_path }}/templates/main_rules.v4.j2"
    dest: /etc/iptables/rules.v4
    owner: root
    group: root
    mode: 0644
  register: modify_etc_iptables_rules_v4_task

- name: Apply iptables rules
  command: iptables-restore /etc/iptables/rules.v4
  when:
    - modify_etc_iptables_rules_v4_task.changed
