---
- name: Install packages
  action: >
    apt name={{ item }} update_cache=yes cache_valid_time=3600 state=latest
  with_list:
  - ldap-account-manager
  - ldap-utils
  - php7.2-imap

- name: Verify all packages are up-to-date
  apt:
    upgrade: yes
    force_apt_get: yes

- name: clears out the local repository of retrieved package files
  command: apt-get clean warn=false
  changed_when: false

- name: Add user "www-data" in group "ssl-cert"
  user:
    name: www-data
    groups: ssl-cert
    append: yes
  register: modify_openldap_group_task

- name: Copy CA certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/ca.crt"
    dest: /etc/ssl/certs/ca.crt
  register: copy_ca_crt_task
  when: not use_letsencrypt_rvprx_cert

- name: Copy LAM certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ certificate_name }}.crt"
    dest: "/etc/ssl/certs/{{ certificate_name }}.crt"
  register: copy_lam_crt_task
  when: not use_letsencrypt_rvprx_cert

- name: Copy LAM key
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ certificate_name }}.key"
    dest: "/etc/ssl/private/{{ certificate_name }}.key"
    mode: 0640
    group: ssl-cert
  register: copy_lam_key_task
  when: not use_letsencrypt_rvprx_cert

- name: Copy LAM certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ rvprx_pair }}/etc/letsencrypt/live/{{ certificate_name }}/fullchain.pem"
    dest: "/etc/ssl/certs/{{ certificate_name }}-fullchain.pem"
  register: copy_lam_crt_task
  when: use_letsencrypt_rvprx_cert

- name: Copy LAM key
  copy:
    src: "{{ minidc_working_directory }}/{{ rvprx_pair }}/etc/letsencrypt/live/{{ certificate_name }}/privkey.pem"
    dest: "/etc/ssl/private/{{ certificate_name }}-privkey.pem"
    mode: 0640
    group: ssl-cert
  register: copy_lam_key_task
  when: use_letsencrypt_rvprx_cert

- name: Enable Apache2 modules
  apache2_module:
    state: present
    name: "{{ item }}"
  loop:
  - ssl
  - rewrite
  register: a2enmod_task

- name : Create VHost for redirecting HTTP 80 to 443
  template:
    src: "{{ role_path }}/templates/main_port80redirect.conf"
    dest: /etc/apache2/sites-available/port80redirect.conf

- name: Create VHost for LAM listening on 443
  template:
    src: "{{ role_path }}/templates/main_port443lam.conf"
    dest: /etc/apache2/sites-available/port443lam.conf

- name: Verify "000-default" vhost status
  command: a2query -qs 000-default
  register: default_vhost_status_task
  changed_when: false
  failed_when: false

- name: Verify "port80redirect" vhost status
  command: a2query -qs port80redirect
  register: port80redirect_vhost_status_task
  changed_when: false
  failed_when: false

- name: Verify "port443lam" vhost status
  command: a2query -qs port443lam
  register: port443lam_vhost_status_task
  changed_when: false
  failed_when: false

- name: Disable "000-default" vhost
  command: a2dissite 000-default
  register: a2dissite_default_task
  when: default_vhost_status_task.rc == 0

- name: Enable "port80redirect" vhost
  command: a2ensite port80redirect
  register: a2ensite_port80redirect_task
  when: port80redirect_vhost_status_task.rc != 0

- name: Enable "port443lam" vhost
  command: a2ensite port443lam
  register: a2ensite_port443lam_task
  when: port443lam_vhost_status_task.rc != 0

- name: Modify "/etc/apache2/mods-available/mpm_prefork.conf" (number of apache2 workers)
  copy:
    src: "{{ role_path }}/files/main_mpm_prefork.conf"
    dest: /etc/apache2/mods-available/mpm_prefork.conf
  register: modify_mod_mpm_prefork_task

#
# First configuration
#

- name: Delete parameters in "/var/lib/ldap-account-manager/config/lam.conf"
  lineinfile:
    path: /var/lib/ldap-account-manager/config/lam.conf
    state: absent
    regexp: '^{{ item }}'
  with_list:
    - ServerURL
    - treesuffix
    - Admins
    - defaultLanguage
    - activeTypes
    - 'modules: posixAccount_pwdHash'
    - 'types: suffix_'
    - 'types: modules_'
    - 'types: attr_'
  when: a2enmod_task.changed

- name: Copy /var/lib/ldap-account-manager/config/lam.conf
  blockinfile:
    path: /var/lib/ldap-account-manager/config/lam.conf
    block: |
      # server address (e.g. ldap://localhost:389 or ldaps://localhost:636)
      ServerURL: ldap://{{ ldap_url }}:389
      serverDisplayName: {{ hostvars[ldap_pair]['ldap_organization'] }}
      # suffix of tree view e.g. dc=yourdomain,dc=org
      treesuffix: {{ ldap_rootdn }}
      # list of users who are allowed to use LDAP Account Manager
      # names have to be seperated by semicolons
      # e.g. admins: cn=admin,dc=yourdomain,dc=org;cn=root,dc=yourdomain,dc=org
      Admins: cn=admin,{{ ldap_rootdn }}
      loginMethod: list
      defaultLanguage: en_US.utf8
      useTLS: yes
      timeZone: {{ local_timezone }}
      activeTypes: user,group,user_1
      # Module settings
      modules: posixAccount_pwdHash: CRYPT-SHA512
      activeTypes: user,group,user_1
      # List of active account types.
      #activeTypes: user,group,user_1
      # Users
      types: suffix_user: ou={{ hostvars[ldap_pair]['ldap_ou_users'] }},{{ ldap_rootdn }}
      types: customLabel_user: Users
      types: modules_user: inetOrgPerson,posixAccount,shadowAccount,imapAccess
      types: attr_user: #uid;#givenName;#sn;#uidNumber;#gidNumber
      types: filter_user:
      types: hidden_user:
      # Groups
      types: suffix_group: ou={{ hostvars[ldap_pair]['ldap_ou_groups'] }},{{ ldap_rootdn }}
      types: customLabel_group: Groups
      types: modules_group: posixGroup
      types: attr_group: #cn;#gidNumber;#memberUID;#description
      types: filter_group:
      types: hidden_group:
      # Applications
      types: suffix_user_1: ou={{ hostvars[ldap_pair]['ldap_ou_applications'] }},{{ ldap_rootdn }}
      types: customLabel_user_1: Applications
      types: modules_user_1: account,posixAccount,shadowAccount
      types: attr_user_1: #uid;#cn
      types: filter_user_1:
      types: hidden_user_1:
    insertafter: '[#]{99}\n'
  when: a2enmod_task.changed

#- name: Read content of file "/usr/share/ldap-account-manager/lib/modules/inetOrgPerson.inc"
#  slurp:
#    src: /usr/share/ldap-account-manager/lib/modules/inetOrgPerson.inc
#  register: inetOrgPerson_slurped
#
#- name: Create content for file "/usr/share/ldap-account-manager/lib/modules/inetSweetOrgPerson.inc"
#  set_fact:
#    inetSweetOrgPerson_content: "{{ inetOrgPerson_slurped.content | b64decode | regex_replace('inetOrgPerson', 'inetSweetOrgPerson') }}"
#
#- name: Create file "/usr/share/ldap-account-manager/lib/modules/inetSweetOrgPerson.inc"
#  copy:
#    content: "{{ inetSweetOrgPerson_content }}"
#    dest: /usr/share/ldap-account-manager/lib/modules/inetSweetOrgPerson.inc
#    owner: root
#    group: root
#    mode: 0644
#
#- name: Read content of file "/usr/share/ldap-account-manager/lib/modules/imapAccess.inc"
#  slurp:
#    src: /usr/share/ldap-account-manager/lib/modules/imapAccess.inc
#  register: imapAccess_slurped
#
#- name: Create content for file "/usr/share/ldap-account-manager/lib/modules/imapSweetAccess.inc"
#  set_fact:
#    imapSweetAccess_content: "{{ imapAccess_slurped.content | b64decode | regex_replace('inetOrgPerson', 'inetSweetOrgPerson') | regex_replace('imapAccess', 'imapSweetAccess') }}"
#
#- name: Create file "/usr/share/ldap-account-manager/lib/modules/imapSweetAccess.inc"
#  copy:
#    content: "{{ imapSweetAccess_content }}"
#    dest: /usr/share/ldap-account-manager/lib/modules/imapSweetAccess.inc
#    owner: root
#    group: root
#    mode: 0644

- name: Be sure the directory "/var/lib/ldap-account-manager/config/profiles/lam" exists
  file:
    path: /var/lib/ldap-account-manager/config/profiles/lam
    state: directory
    owner: www-data
    group: root
    mode: 0755
  when: a2enmod_task.changed

- name: Create lam "Users" profile
  lineinfile:
    path: /var/lib/ldap-account-manager/config/profiles/lam/default.user
    create: yes
    owner: www-data
    group: www-data
    line: '{{ item }}'
  with_list:
  - "profname: default"
  - "ldap_suffix: ou={{ hostvars[ldap_pair]['ldap_ou_users'] }},{{ ldap_rootdn }}"
  - "ldap_rdn: uid"
  when: a2enmod_task.changed

- name: Create lam "Groups" profile
  lineinfile:
    path: /var/lib/ldap-account-manager/config/profiles/lam/default.group
    create: yes
    owner: www-data
    group: www-data
    line: '{{ item }}'
  with_list:
  - "profname: default"
  - "ldap_suffix: ou={{ hostvars[ldap_pair]['ldap_ou_groups'] }},{{ ldap_rootdn }}"
  - "ldap_rdn: cn"
  when: a2enmod_task.changed

- name: Create lam "Applications" profile
  lineinfile:
    path: /var/lib/ldap-account-manager/config/profiles/lam/default.user_1
    create: yes
    owner: www-data
    group: www-data
    line: '{{ item }}'
  with_list:
  - "profname: default"
  - "ldap_suffix: ou={{ hostvars[ldap_pair]['ldap_ou_applications'] }},{{ ldap_rootdn }}"
  - "ldap_rdn: uid"
  when: a2enmod_task.changed

#
# Restore
#

- name: Check if "/etc/ldap-account-manager/config.cfg" exists in "{{ minidc_working_directory }}/{{ inventory_hostname }}"
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/ldap-account-manager/config.cfg"
  register: config_cfg_on_localhost
  when: push_config

- name: Check if "/var/lib/ldap-account-manager/config" exists in "{{ minidc_working_directory }}/{{ inventory_hostname }}"
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager/config"
  register: config_dir_on_localhost
  when: push_config

- name: Copy "/etc/ldap-account-manager/config.cfg" from "{{ minidc_working_directory }}/{{ inventory_hostname }}" on localhost to the container
  copy:
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/ldap-account-manager/config.cfg"
    dest: /etc/ldap-account-manager/config.cfg
  register: copy_config_file_from_localhost_task
  when:
  - push_config
  - config_cfg_on_localhost.stat.exists

- name: Copy "/var/lib/ldap-account-manager/config" directory from "{{ minidc_working_directory }}/{{ inventory_hostname }}" on localhost to the container
  synchronize:
    mode: push
    archive: yes
    delete: yes
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager/config"
    dest: /var/lib/ldap-account-manager/
  register: copy_config_dir_from_localhost_task
  when:
  - push_config
  - config_dir_on_localhost.stat.exists

# Reload Apache if anything has changed

- name: Reload apache2 systemd service
  systemd:
    name: apache2
    state: reloaded
  when: a2enmod_task.changed or
        copy_ca_crt_task.changed or
        copy_lam_crt_task.changed or
        copy_lam_key_task.changed or
        a2dissite_000default_task is defined and a2dissite_000default_task.changed or
        a2ensite_port80redirect_task is defined and a2ensite_port80redirect_task.changed or
        a2ensite_port443lam_task is defined and a2ensite_port443lam_task.changed or
        modify_mod_mpm_prefork_task.changed or
        copy_config_file_from_localhost_task.changed or
        copy_config_file_from_localhost_task.changed

# Backup

- name: Fetch "/etc/ldap-account-manager/config.cfg" file (in "{{ minidc_working_directory }}/{{ inventory_hostname }}" on localhost)
  fetch:
    src: /etc/ldap-account-manager/config.cfg
    dest: "{{ minidc_working_directory }}"
  when: not push_config

- name: Be sure that "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager" directory exists
  local_action:
    module: file
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager"
    state: directory

- name: Fetch "/var/lib/ldap-account-manager/config" directory
  synchronize:
    mode: pull
    archive: yes
    delete: yes
    src: /var/lib/ldap-account-manager/config
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager/"
  when: not push_config
