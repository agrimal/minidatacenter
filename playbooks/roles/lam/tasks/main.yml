---
- name: Install packages
  apt:
    name: "{{ item }}"
    update_cache: yes
    cache_valid_time: 3600
    state: present
  loop:
  - ldap-account-manager
  - ldap-utils
  - ssl-cert
  - rsync

- name: clears out the local repository of retrieved package files
  command: apt-get clean
  changed_when: false

- name: Add user "www-data" in group "ssl-cert"
  user:
    name: www-data
    groups: ssl-cert
    append: yes
  register: modify_openldap_group_task

- name: Copy CA certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/ca.crt"
    dest: /etc/ssl/certs/ca.crt
  register: copy_ca_crt_task

- name: Copy LAM certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ lam_certificate }}.crt"
    dest: "/etc/ssl/certs/{{ lam_certificate }}.crt"
  register: copy_ldap_crt_task

- name: Copy LAM key
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ lam_certificate }}.key"
    dest: "/etc/ssl/private/{{ lam_certificate }}.key"
    mode: 0640
    group: ssl-cert
  register: copy_ldap_key_task

- name: Enable Apache2 modules
  apache2_module:
    state: present
    name: "{{ item }}"
  loop:
  - ssl
  - rewrite
  register: a2enmod_task

- name : Create VHost for redirecting HTTP 80 to 443
  template:
    src: "{{ role_path }}/templates/main_port80redirect.conf"
    dest: /etc/apache2/sites-available/port80redirect.conf

- name: Create VHost for LAM listening on 443
  template:
    src: "{{ role_path }}/templates/main_port443lam.conf"
    dest: /etc/apache2/sites-available/port443lam.conf

- name: Verify "000-default" vhost status
  command: a2query -qs 000-default
  register: default_vhost_status_task
  changed_when: false
  failed_when: false

- name: Verify "port80redirect" vhost status
  command: a2query -qs port80redirect
  register: port80redirect_vhost_status_task
  changed_when: false
  failed_when: false

- name: Verify "port443lam" vhost status
  command: a2query -qs port443lam
  register: port443lam_vhost_status_task
  changed_when: false
  failed_when: false

- name: Disable "000-default" vhost
  command: a2dissite 000-default
  register: a2dissite_default_task
  when: default_vhost_status_task.rc == 0

- name: Enable "port80redirect" vhost
  command: a2ensite port80redirect
  register: a2ensite_port80redirect_task
  when: port80redirect_vhost_status_task.rc != 0

- name: Enable "port443lam" vhost
  command: a2ensite port443lam
  register: a2ensite_port443lam_task
  when: port443lam_vhost_status_task.rc != 0

- name: Modify "/etc/apache2/mods-available/mpm_prefork.conf" (number of apache2 workers)
  copy:
    src: "{{ role_path }}/files/main_mpm_prefork.conf"
    dest: /etc/apache2/mods-available/mpm_prefork.conf
  register: modify_mod_mpm_prefork_task

- name: Reload apache2 systemd service
  systemd:
    name: apache2
    state: reloaded
  when:
  - a2enmod_task.changed or
    a2dissite_000default_task is defined and a2dissite_000default_task.changed or
    a2ensite_port80redirect_task is defined and a2ensite_port80redirect_task.changed or
    a2ensite_port443lam_task is defined and a2ensite_port443lam_task.changed or
    modify_mod_mpm_prefork_task.changed

#
# Backup / Restore
#

- name: Check if "/etc/ldap-account-manager/config.cfg" exists in "{{ minidc_working_directory }}/{{ inventory_hostname }}"
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/ldap-account-manager/config.cfg"
  register: config_cfg_on_localhost

- name: Check if "/var/lib/ldap-account-manager/config" exists in "{{ minidc_working_directory }}/{{ inventory_hostname }}"
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager/config"
  register: config_dir_on_localhost

# Restore

- name: Copy "/etc/ldap-account-manager/config.cfg" from "{{ minidc_working_directory }}/{{ inventory_hostname }}" on localhost to the container
  copy:
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/ldap-account-manager/config.cfg"
    dest: /etc/ldap-account-manager/config.cfg
  when:
  - push_config
  - config_cfg_on_localhost.stat.exists

- name: Copy "/var/lib/ldap-account-manager/config" directory from "{{ minidc_working_directory }}/{{ inventory_hostname }}" on localhost to the container
  synchronize:
    mode: push
    archive: yes
    delete: yes
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager/config"
    dest: /var/lib/ldap-account-manager/
  when: push_config

# Backup

- name: Fetch "/etc/ldap-account-manager/config.cfg" file (in "{{ minidc_working_directory }}/{{ inventory_hostname }}" on localhost)
  fetch:
    src: /etc/ldap-account-manager/config.cfg
    dest: "{{ minidc_working_directory }}"
  when: not push_config

- name: Be sure that "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager" directory exists
  local_action:
    module: file
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager"
    state: directory

- name: Fetch "/var/lib/ldap-account-manager/config" directory
  synchronize:
    mode: pull
    archive: yes
    delete: yes
    src: /var/lib/ldap-account-manager/config
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/lib/ldap-account-manager/"
  when: not push_config
