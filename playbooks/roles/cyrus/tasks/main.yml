---
- name: Install packages
  action: >
    apt name={{ item }} update_cache=yes cache_valid_time=3600 state=latest
  with_list:
  - cyrus-imapd
  - cyrus-admin
  - cyrus-doc
  - cyrus-clients
  - cyrus-caldav
  - imapcopy
  - sasl2-bin

- name: Verify all packages are up-to-date
  apt:
    upgrade: yes
    force_apt_get: yes

- name: clears out the local repository of retrieved package files
  command: apt-get clean warn=false
  changed_when: false

# Configure saslauthd

- name: Get password for "cyrus" LDAP account
  set_fact:
    cyrus_password: "{{ item }}"
  with_file: "{{ minidc_working_directory }}/{{ ldap_pair }}/passwords/{{ cyrus_ldap_account }}_password"
  loop_control:
    label: "{{ cyrus_ldap_account }}_password"

- name: Copy "/etc/default/saslauthd"
  copy:
    src: "{{ role_path }}/files/main_etc_default_saslauthd"
    dest: /etc/default/saslauthd
    mode: 0640
  register: copy_etc_default_saslauthd_task

- name: Copy "/etc/saslauthd.conf"
  template:
    src: "{{ role_path }}/templates/main_etc_saslauthd.conf.j2"
    dest: /etc/saslauthd.conf
  register: copy_etc_saslauthd_conf_task

- name: Copy CA certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/ca.crt"
    dest: "{{ ca_cert_dir }}/{{ ca_cert_file }}"
  register: copy_ca_crt_task
  when: not use_letsencrypt_rvprx_cert

- name: Copy Cyrus certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ cyrus_certificate }}.crt"
    dest: "{{ ca_cert_dir }}/{{ cyrus_certificate }}.crt"
  register: copy_cyrus_crt_task
  when: not use_letsencrypt_rvprx_cert

- name: Copy Cyrus certificate key
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ cyrus_certificate }}.key"
    dest: "{{ ca_private_dir }}/{{ cyrus_certificate }}.key"
    mode: 0640
    group: ssl-cert
  register: copy_cyrus_key_task
  when: not use_letsencrypt_rvprx_cert

- name: Restart systemd saslauthd service
  systemd:
    name: saslauthd
    state: restarted
  when: copy_etc_default_saslauthd_task.changed or
        copy_etc_saslauthd_conf_task.changed or
        copy_ca_crt_task.changed or
        copy_cyrus_crt_task.changed or
        copy_cyrus_key_task.changed

# Configure Cyrus

- name: Add user "cyrus" in group "ssl-cert"
  user:
    name: cyrus
    groups: ssl-cert
    append: yes
 
- name: Copy "/etc/cyrus.conf"
  copy:
    src: "{{ role_path }}/files/main_etc_cyrus.conf"
    dest: /etc/cyrus.conf
    mode: 0644
  register: copy_etc_cyrus_conf_task

- name: Copy "/etc/imapd.conf"
  template:
    src: "{{ role_path }}/templates/main_etc_imapd.conf.j2"
    dest: /etc/imapd.conf
    mode: 0644
  register: copy_etc_imapd_conf_task

- name: Check if "/var/lib/cyrus/tls_sessions.db" file exists
  stat:
    path: /var/lib/cyrus/tls_sessions.db
  register: var_lib_cyrus_tls_sessions_db

- name: Create file "/var/lib/cyrus/tls_sessions.db"
  file:
    path: /var/lib/cyrus/tls_sessions.db
    owner: cyrus
    group: mail
    state: touch
  when: not var_lib_cyrus_tls_sessions_db.stat.exists

- name: Configure LMTP port
  lineinfile:
    path: /etc/services
    insertafter: '^telnet\t\t23/tcp$'
    line: "lmtp\t\t24/tcp"
    mode: 0644

- name: Copy letsencrypt certificate for {{ cyrus_certificate }}
  copy:
    src: "{{ minidc_working_directory }}/{{ rvprx_pair }}/etc/letsencrypt/live/{{ cyrus_certificate }}/fullchain.pem"
    dest: "{{ ca_cert_dir }}/{{ cyrus_certificate }}-fullchain.pem"
    owner: root
    group: ssl-cert
    mode: 0644
  when: use_letsencrypt_rvprx_cert
  register: copy_letsencrypt_certificate

- name: Copy letsencrypt certificate key for {{ cyrus_certificate }}
  copy:
    src: "{{ minidc_working_directory }}/{{ rvprx_pair }}/etc/letsencrypt/live/{{ cyrus_certificate }}/privkey.pem"
    dest: "{{ ca_private_dir }}/{{ cyrus_certificate }}-privkey.pem"
    owner: root
    group: ssl-cert
    mode: 0640
  when: use_letsencrypt_rvprx_cert
  register: copy_letsencrypt_certificate_key

- name: Restart systemd cyrus-imapd service
  systemd:
    name: cyrus-imapd
    state: restarted
  when: copy_etc_cyrus_conf_task.changed or
        copy_etc_imapd_conf_task.changed or
        not var_lib_cyrus_tls_sessions_db.stat.exists or
        copy_letsencrypt_certificate.changed or
        copy_letsencrypt_certificate_key.changed

- name: Enable and start systemd cyrus-imapd service
  systemd:
    name: cyrus-imapd
    state: started
    enabled: yes

- name: Delete the useless directories in "/var/spool/cyrus/mail"
  file:
    path: /var/spool/cyrus/mail/{{ item }}
    state: absent
  with_list: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]

- name: Delete the useless directories in "/var/spool/cyrus/new"
  file:
    path: /var/spool/cyrus/news/{{ item }}
    state: absent
  with_list: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]

# Backup and Restore

- fail:
  when: backup_files and restore_files

# Backup

- name: Create directory to backup files
  local_action:
    module: file
    state: directory
    recurse: true
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/{{ item }}"
  with_list:
  - var/spool/cyrus
  - var/lib/cyrus
  when: backup_files

- name: Dump the base mailboxes.db
  shell: "/usr/lib/cyrus/bin/ctl_mboxlist -d > /tmp/mailboxlist.txt"
  become: true
  become_method: su
  become_user: cyrus
  changed_when: false
  when: backup_files

- name: Fetch the dump of mailboxes.db
  fetch:
    src: /tmp/mailboxlist.txt
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/"
    flat: true
  when: backup_files

- name: Make a first backup of cyrus files
  synchronize:
    mode: pull
    archive: yes
    delete: yes
    src: "/var/{{ item }}/cyrus"
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/{{ item }}/"
  with_list:
  - spool
  - lib
  when: backup_files

- name: Stop cyrus-imapd service
  systemd:
    name: cyrus-imapd
    state: stopped
  when: backup_files

- name: Make a second backup of cyrus files while cyrus is stopped
  synchronize:
    mode: pull
    archive: yes
    delete: yes
    src: "/var/{{ item }}/cyrus"
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/{{ item }}/"
  with_list:
  - spool
  - lib
  when: backup_files

- name: Start cyrus-imapd service
  systemd:
    name: cyrus-imapd
    state: started
  when: backup_files

# Restore

- name: Stop cyrus-imapd service
  systemd:
    name: cyrus-imapd
    state: stopped
  when: restore_files

- name: Delete files in "/var/lib/cyrus"
  file:
    path: /var/lib/cyrus
    state: '{{ item }}'
    owner: cyrus
    group: mail
  loop:
  - absent
  - directory
  when: restore_files

- name: Delete files in "/var/spool/cyrus"
  file:
    path: /var/spool/cyrus
    state: '{{ item }}'
    owner: cyrus
    group: mail
  loop:
  - absent
  - directory
  when: restore_files

- name: Restore cyrus files while cyrus is stopped
  synchronize:
    mode: push
    archive: yes
    delete: yes
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/var/{{ item }}/cyrus"
    dest: "/var/{{ item }}/"
    rsync_opts: ['--owner', '--group', '--chown=cyrus:mail']
  with_list:
  - spool
  - lib
  when: restore_files

- name: Start cyrus-imapd service
  systemd:
    name: cyrus-imapd
    state: started
  when: restore_files
