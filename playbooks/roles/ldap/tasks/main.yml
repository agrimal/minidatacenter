---
- name: Update repositories cache and install package debconf-utils
  apt:
    name: debconf-utils
    update_cache: yes
    cache_valid_time: 3600
    state: latest

- name: Read slapd debconf selections
  debconf:
    name: slapd
  register: debconf_slapd

- name: Configure slapd debconf selections "shared/organization"
  debconf:
    name: slapd
    question: shared/organization
    value: "{{ ldap_organization }}"
    vtype: string
  when: debconf_slapd['current']['shared/organization'] is not defined

- name: Configure slapd debconf selections "slapd/domain"
  debconf:
    name: slapd
    question: slapd/domain
    value: "{{ ldap_domain }}"
    vtype: string
  when: debconf_slapd['current']['slapd/domain'] is not defined

- name: Configure slapd debconf selections "slapd/purge_database"
  debconf:
    name: slapd
    question: slapd/purge_database
    value: "true"
    vtype: boolean
  when: debconf_slapd['current']['slapd/purge_database'] is not defined

- name: Configure slapd debconf selections "slapd/password1"
  debconf:
    name: slapd
    question: slapd/password1
    value: password
    vtype: password
  when: debconf_slapd['current']['slapd/password1'] is not defined

- name: Configure slapd debconf selections "slapd/password2"
  debconf:
    name: slapd
    question: slapd/password2
    value: password
    vtype: password
  when: debconf_slapd['current']['slapd/password1'] is not defined

- name: Install packages
  apt:
    name: "{{ item }}"
    update_cache: yes
    cache_valid_time: 3600
    state: latest
  loop:
  - slapd
  - ldap-utils
  - ssl-cert
#  - python3-pip
#  - libldap2-dev
#  - libsasl2-dev

- name: clears out the local repository of retrieved package files
  command: apt-get clean warn=false
  changed_when: false

#- name: Install "python-ldap" pip package
#  pip:
#    name: python-ldap
#    version: 3.0.0

- name : Modify "/etc/default/slapd"
  template:
    src: "{{ role_path }}/templates/main_slapd.j2"
    dest: /etc/default/slapd
    owner: root
    group: root
    mode: 0644
  register: modify_etc_default_slapd_task

- name: Modify parameter "DefaultLimitNOFILE" in "/etc/systemd/system.conf"
  replace:
    path: /etc/systemd/system.conf
    regexp: '^#DefaultLimitNOFILE=$'
    replace: 'DefaultLimitNOFILE=1024'
  register: modify_etc_systemd_system_conf_task

- name: Add user "openldap" in group "ssl-cert"
  user:
    name: openldap
    groups: ssl-cert
    append: yes
  register: modify_openldap_group_task

- name: Copy CA certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/ca.crt"
    dest: "{{ ca_cert_dir }}/{{ ca_cert_file }}"
  register: copy_ca_crt_task

- name: Copy LDAP certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ ldap_certificate }}.crt"
    dest: "{{ ca_cert_dir }}/{{ ldap_certificate }}.crt"
  register: copy_ldap_crt_task

- name: Copy LDAP key
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ ldap_certificate }}.key"
    dest: "{{ ca_private_dir }}/{{ ldap_certificate }}.key"
    mode: 0640
    group: ssl-cert
  register: copy_ldap_key_task

- name: Restart slapd service if configuration has changed
  systemd:
    name: slapd
    state: restarted
  when:
  - modify_etc_default_slapd_task.changed or
    modify_etc_systemd_system_conf_task.changed or
    modify_openldap_group_task.changed or
    copy_ca_crt_task.changed or
    copy_ldap_crt_task.changed or
    copy_ldap_key_task.changed

- name: Copy "/etc/rsyslog.d/01-slapd.conf"
  copy:
    src: "{{ role_path }}/files/main_rsyslog_01-slapd.conf"
    dest: /etc/rsyslog.d/01-slapd.conf
    owner: root
    group: root
    mode: 0644
  register: copy_rsyslog_slapd_conf_task

- name: Verify that "/var/log/slapd" directory exists
  file:
    path: /var/log/slapd
    state: directory
    owner: syslog
    group: syslog
    mode: 0755

- name: Verify that "{{ ldap_dir }}" directory exists
  file:
    path: "{{ ldap_dir }}"
    state: directory
    owner: openldap

- name: Restart rsyslog service
  systemd:
    name: rsyslog
    state: restarted
  when:
    - copy_rsyslog_slapd_conf_task.changed

- name: Configure logrotate for slapd
  copy:
    src: "{{ role_path }}/files/main_logrotate_slapd"
    dest: /etc/logrotate.d/slapd
    owner: root
    group: root
    mode: 0644

#
# Restore backups
#

- name: Check if config backup exists
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_config.ldif"
  register: config_backup_on_localhost
  when: push_config

- name: Check if mdb backup exists
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_mdb.ldif"
  register: mdb_backup_on_localhost
  when: push_config

- fail:
    msg: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_config.ldif does not exist"
  when:
  - push_config
  - not config_backup_on_localhost.stat.exists

- fail:
    msg: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_mdb.ldif does not exist"
  when:
  - push_config
  - not mdb_backup_on_localhost.stat.exists

- name: Copy backups into the container
  copy:
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_{{ item }}.ldif"
    dest: /tmp/slapd/
  loop:
  - config
  - mdb
  when: push_config

- name: Stop slapd service
  systemd:
    name: slapd
    state: stopped
  when: push_config

- name: Delete files in "/etc/ldap/slapd.d"
  file:
    path: /etc/ldap/slapd.d
    state: "{{ item }}"
    owner: openldap
    group: openldap
  loop:
  - absent
  - directory
  when: push_config

- name: Restore "cn=config" database
  become: yes
  become_user: openldap
  command: slapadd -F /etc/ldap/slapd.d -b cn=config -l /tmp/slapd/backup_config.ldif
  when: push_config

- name: Delete files in "/var/lib/ldap"
  file:
    path: /var/lib/ldap
    state: '{{ item }}'
    owner: openldap
    group: openldap
  loop:
  - absent
  - directory
  when: push_config

- name: Restore '{{ ldap_rootdn }}' database
  become: yes
  become_user: openldap
  command: slapadd -F /etc/ldap/slapd.d -b '{{ ldap_rootdn }}' -l /tmp/slapd/backup_mdb.ldif
  when: push_config

- name: Start slapd service
  systemd:
    name: slapd
    state: started
  when: push_config

#
# Configure LDAP databases
#

- name: Define ldapsearch and ldapmodify commands
  set_fact:
    ldapsearch_command: ldapsearch -o ldif-wrap=no -Q -Y external -H ldapi:///
    ldapmodify_command: ldapmodify -Y external -H ldapi:///

- name: Prepare variables to modify 'olcLogLevel' attribute for 'cn=config'
  set_fact:
    dn: cn=config
    search_base: cn=config
    filter: cn=config
    attribute: olcLogLevel
    wanted_attribute_value:
    - stats acl

- include_tasks: '{{ role_path }}/tasks/ldap_attributes.yml'

- name: Prepare variables to modify 'olcPasswordHash' attribute for 'cn=config'
  set_fact:
    dn: cn=config
    search_base: cn=config
    filter: cn=config
    attribute: olcPasswordHash
    wanted_attribute_value:
    - '{CRYPT}'

- include_tasks: '{{ role_path }}/tasks/ldap_attributes.yml'

- name: Prepare variables to modify 'olcPasswordCryptSaltFormat' attribute for 'cn=config'
  set_fact:
    dn: cn=config
    search_base: cn=config
    filter: cn=config
    attribute: olcPasswordCryptSaltFormat
    wanted_attribute_value:
    - $6$%.16s

- include_tasks: '{{ role_path }}/tasks/ldap_attributes.yml'

- name: Prepare variables to delete 'olcRootPW' attribute for 'olcDatabase={1}mdb,cn=config'
  set_fact:
    dn: olcDatabase={1}mdb,cn=config
    search_base: cn=config
    filter: olcDatabase={1}mdb
    attribute: olcRootPW
    wanted_attribute_value:

- include_tasks: '{{ role_path }}/tasks/ldap_attributes.yml'

- name: Prepare variables to add 'olcTLSCACertificateFile' attribute for 'cn=config'
  set_fact:
    dn: cn=config
    search_base: cn=config
    filter: cn=config
    attribute: olcTLSCACertificateFile
    wanted_attribute_value:
    - '{{ ca_cert_dir }}/{{ ca_cert_file }}'

- include_tasks: '{{ role_path }}/tasks/ldap_attributes.yml'

- name: Define 'olcTLSCertificateFile' and 'olcTLSCertificateKeyFile' values for 'cn=config'
  set_fact:
    config_olcTLSCertificateFile: "{{ ca_cert_dir }}/{{ ldap_certificate }}.crt"
    config_olcTLSCertificateKeyFile: "{{ ca_private_dir }}/{{ ldap_certificate }}.key"

- name: Execute ldapsearch to get olcTLSCertificateFile attribute value for "cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(cn=config)' olcTLSCertificateFile -LLL"
  register: ldapsearch_config_olcTLSCertificateFile
  changed_when: False

- name: Execute ldapsearch to get olcTLSCertificateKeyFile attribute value for "cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(cn=config)' olcTLSCertificateKeyFile -LLL"
  register: ldapsearch_config_olcTLSCertificateKeyFile
  changed_when: False

- name: Extract olcTLSCertificateFile and olcTLSCertificateKeyFile attributes values from previous ldapsearches
  set_fact:
    current_config_olcTLSCertificateFile: "{{ ldapsearch_config_olcTLSCertificateFile.stdout | regex_replace('\\n', '') | regex_replace('.*olcTLSCertificateFile::? (.*)', '\\1') }}"
    current_config_olcTLSCertificateKeyFile: "{{ ldapsearch_config_olcTLSCertificateKeyFile.stdout | regex_replace('\\n', '') | regex_replace('.*olcTLSCertificateKeyFile::? (.*)', '\\1') }}"

- name: Copy "/srv/slapd/config_{{ item }}.ldif" LDIF files
  template:
    src: "{{ role_path }}/templates/main_config_{{ item }}.ldif.j2"
    dest: /srv/slapd/config_{{ item }}.ldif
  loop:
  - olcTLS_attributes_add
  when:
  - "current_config_olcTLSCertificateFile == 'dn: cn=config'"
  - "current_config_olcTLSCertificateKeyFile == 'dn: cn=config'"

- name: Add olcTLSCertificateFile and olcTLSCertificateKeyFile attributes to "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcTLS_attributes_add.ldif"
  when:
  - "current_config_olcTLSCertificateFile == 'dn: cn=config'"
  - "current_config_olcTLSCertificateKeyFile == 'dn: cn=config'"

- name: Prepare variables to modify 'olcTLSCertificateFile' attribute for 'cn=config'
  set_fact:
    dn: cn=config
    search_base: cn=config
    filter: cn=config
    attribute: olcTLSCertificateFile
    wanted_attribute_value:
    - "{{ config_olcTLSCertificateFile }}"

- include_tasks: "{{ role_path }}/tasks/ldap_attributes.yml"
  when:
  - "current_config_olcTLSCertificateFile != 'dn: cn=config'"
  - current_config_olcTLSCertificateFile != config_olcTLSCertificateFile

- name: Prepare variables to modify 'olcTLSCertificateKeyFile' attribute for 'cn=config'
  set_fact:
    dn: cn=config
    search_base: cn=config
    filter: cn=config
    attribute: olcTLSCertificateKeyFile
    wanted_attribute_value:
    - "{{ config_olcTLSCertificateKeyFile }}"

- include_tasks: "{{ role_path }}/tasks/ldap_attributes.yml"
  when:
  - "current_config_olcTLSCertificateKeyFile != 'dn: cn=config'"
  - current_config_olcTLSCertificateKeyFile != config_olcTLSCertificateKeyFile

- name: Prepare variables to modify 'olcAccess' attribute for 'olcDatabase={0}config,cn=config'
  set_fact:
    dn: olcDatabase={0}config,cn=config
    search_base: cn=config
    filter: olcDatabase={0}config
    attribute: olcAccess
    wanted_attribute_value:
    - to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage by dn.exact=cn=admin,dc=tech-tips,dc=fr ssf=256 manage by * none

- include_tasks: "{{ role_path }}/tasks/ldap_attributes.yml"

- name: Prepare variables to modify 'olcAccess' attribute for 'olcDatabase={-1}frontend,cn=config'
  set_fact:
    dn: olcDatabase={-1}frontend,cn=config
    search_base: cn=config
    filter: olcDatabase={-1}frontend
    attribute: olcAccess
    wanted_attribute_value:
    - to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage by dn.exact=cn=admin,{{ ldap_rootdn }} ssf=256 manage by * break
    - to dn.exact="" by * ssf=256 read
    - to dn.base="cn=Subschema" by * ssf=256 read

- include_tasks: "{{ role_path }}/tasks/ldap_attributes.yml"

- name: Prepare variables to modify 'olcAccess' attribute for 'olcDatabase={1}mdb,cn=config'
  set_fact:
    dn: olcDatabase={1}mdb,cn=config
    search_base: cn=config
    filter: olcDatabase={1}mdb
    attribute: olcAccess
    wanted_attribute_value:
    - to attrs=userPassword,shadowLastChange by self ssf=256 write by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth write by dn.exact=cn=admin,{{ ldap_rootdn }} ssf=256 write by anonymous ssf=256 auth by * none
    - to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage by dn.exact=cn=admin,{{ ldap_rootdn }} ssf=256 manage by users ssf=256 read by anonymous ssf=256 auth by * none

- include_tasks: "{{ role_path }}/tasks/ldap_attributes.yml"

- name: Prepare variables to modify 'olcTLSVerifyClient' attribute for 'cn=config'
  set_fact:
    dn: cn=config
    search_base: cn=config
    filter: cn=config
    attribute: olcTLSVerifyClient
    wanted_attribute_value:
    - never

- include_tasks: "{{ role_path }}/tasks/ldap_attributes.yml"

- name: Prepare variables to add 'ou' to '{{ ldap_rootdn }}'
  set_fact:
    rdn_type: ou
    objectClasses:
    - organizationalUnit
    state: present

- include_tasks: "{{ role_path }}/tasks/ldap_entry.yml"
  loop: "{{ [ldap_ou_users] + [ldap_ou_groups] + [ldap_ou_applications] + ldap_ou_additional_list }}"
  loop_control:
    loop_var: rdn_value

- name: Prepare variables to add applications accounts to 'ou={{ ldap_ou_applications }},{{ ldap_rootdn }}'
  set_fact:
    old_ldap_rootdn: "{{ ldap_rootdn }}"
    rdn_type: uid
    objectClasses:
    - account
    - simpleSecurityObject
    attributes:
    - 'userPassword: password'
    state: present

- include_tasks: "{{ role_path }}/tasks/ldap_entry.yml"
  vars:
    ldap_rootdn: "ou={{ ldap_ou_applications }},{{ old_ldap_rootdn }}"
    attributes:
    - "{{ 'userPassword: {CRYPT}' + lookup('password', minidc_working_directory + '/' + inventory_hostname + '/' + rdn_value + '_password length=50 chars=ascii_letters,digits,hexdigits') | password_hash('sha512') }}"
  loop: "{{ ldap_applications_accounts }}"
  loop_control:
    loop_var: rdn_value
  register: create_applications_accounts_task

- name: Delete applications accounts password files
  local_action:
    module: file
    path: "{{ minidc_working_directory + '/' + inventory_hostname + '/passwords/' + item + '_password' }}"
    state: absent
  loop: "{{ ldap_applications_accounts }}"
  when: ansible_renew_all

- name: Prepare variables to modify 'userPassword' attribute for applications accounts
  set_fact:
    search_base: "{{ ldap_rootdn }}"
    attribute: userPassword
  when:
  - ansible_renew_all or
    create_applications_accounts_task.changed

- name: Generate passwords for applications accounts
  include_tasks: "{{ role_path }}/tasks/ldap_attributes.yml"
  vars:
    dn: "uid={{ item }},ou={{ ldap_ou_applications }},{{ ldap_rootdn }}"
    filter: "uid={{ item }}"
    wanted_attribute_value:
    - "{{ '{CRYPT}' + lookup('password', minidc_working_directory + '/passwords/' + inventory_hostname + '/' + item + '_password length=50 chars=ascii_letters,digits,hexdigits') | password_hash('sha512') }}"
  loop: "{{ ldap_applications_accounts }}"
  when:
  - ansible_renew_all or
    create_applications_accounts_task.changed

#
# Backup the databases
#

- name: Make a backup of "cn=config" database
  command: slapcat -o ldif-wrap=no -b cn=config -l /srv/slapd/backup_config.ldif
  changed_when: False

- name: Make a backup of "{{ ldap_rootdn }}" database
  command: slapcat -o ldif-wrap=no -b "{{ ldap_rootdn }}" -l /srv/slapd/backup_mdb.ldif
  changed_when: False

- name: Fetch the databases backups
  fetch:
    src: "{{ item }}"
    dest: "{{ minidc_working_directory }}"
  loop:
  - /srv/slapd/backup_config.ldif
  - /srv/slapd/backup_mdb.ldif
  when: not push_config
