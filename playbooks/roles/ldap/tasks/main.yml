---
- name: Update repositories cache and install package debconf-utils
  apt:
    name: debconf-utils
    update_cache: yes
    cache_valid_time: 3600
    state: present

- name: Read slapd debconf selections
  debconf:
    name: slapd
  register: debconf_slapd

- name: Configure slapd debconf selections "shared/organization"
  debconf:
    name: slapd
    question: shared/organization
    value: "{{ ldap_organization }}"
    vtype: string
  when: debconf_slapd['current']['shared/organization'] is not defined

- name: Configure slapd debconf selections "slapd/domain"
  debconf:
    name: slapd
    question: slapd/domain
    value: "{{ ldap_domain }}"
    vtype: string
  when: debconf_slapd['current']['slapd/domain'] is not defined

- name: Configure slapd debconf selections "slapd/purge_database"
  debconf:
    name: slapd
    question: slapd/purge_database
    value: "true"
    vtype: boolean
  when: debconf_slapd['current']['slapd/purge_database'] is not defined

- name: Configure slapd debconf selections "slapd/password1"
  debconf:
    name: slapd
    question: slapd/password1
    value: password
    vtype: password
  when: debconf_slapd['current']['slapd/password1'] is not defined

- name: Configure slapd debconf selections "slapd/password2"
  debconf:
    name: slapd
    question: slapd/password2
    value: password
    vtype: password
  when: debconf_slapd['current']['slapd/password1'] is not defined

- name: Install packages
  apt:
    name: "{{ item }}"
    update_cache: yes
    cache_valid_time: 3600
    state: present
  loop:
  - slapd
  - ldap-utils
  - ssl-cert
#  - python3-pip
#  - libldap2-dev
#  - libsasl2-dev

- name: clears out the local repository of retrieved package files
  command: apt-get clean warn=false
  changed_when: false

#- name: Install "python-ldap" pip package
#  pip:
#    name: python-ldap
#    version: 3.0.0

- name : Modify "/etc/default/slapd"
  template:
    src: "{{ role_path }}/templates/main_slapd.j2"
    dest: /etc/default/slapd
    owner: root
    group: root
    mode: 0644
  register: modify_etc_default_slapd_task

- name: Modify parameter "DefaultLimitNOFILE" in "/etc/systemd/system.conf"
  replace:
    path: /etc/systemd/system.conf
    regexp: '^#DefaultLimitNOFILE=$'
    replace: 'DefaultLimitNOFILE=1024'
  register: modify_etc_systemd_system_conf_task

- name: Add user "openldap" in group "ssl-cert"
  user:
    name: openldap
    groups: ssl-cert
    append: yes
  register: modify_openldap_group_task

- name: Copy CA certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/ca.crt"
    dest: /etc/ssl/certs/ca.crt
  register: copy_ca_crt_task

- name: Copy LDAP certificate
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ ldap_certificate }}.crt"
    dest: "/etc/ssl/certs/{{ ldap_certificate }}.crt"
  register: copy_ldap_crt_task

- name: Copy LDAP key
  copy:
    src: "{{ minidc_working_directory }}/{{ ca_pair }}/{{ hostvars[ca_pair]['ca_easy_rsa_install_dir'] }}/keys/{{ ldap_certificate }}.key"
    dest: "/etc/ssl/private/{{ ldap_certificate }}.key"
    mode: 0640
    group: ssl-cert
  register: copy_ldap_key_task

- name: Restart slapd service if configuration has changed
  systemd:
    name: slapd
    state: restarted
  when:
  - modify_etc_default_slapd_task.changed or
    modify_etc_systemd_system_conf_task.changed or
    modify_openldap_group_task.changed or
    copy_ca_crt_task.changed or
    copy_ldap_crt_task.changed or
    copy_ldap_key_task.changed

- name: Copy "/etc/rsyslog.d/01-slapd.conf"
  copy:
    src: "{{ role_path }}/files/main_01-slapd.conf"
    dest: /etc/rsyslog.d/01-slapd.conf
    owner: root
    group: root
    mode: 0644
  register: copy_rsyslog_slapd_conf_task

- name: Verify that "/var/log/slapd" directory exists
  file:
    path: /var/log/slapd
    state: directory
    owner: syslog
    group: syslog
    mode: 0755

- name: Verify that "/srv/slapd" directory exists
  file:
    path: /srv/slapd
    state: directory
    owner: openldap

- name: Restart rsyslog service
  systemd:
    name: rsyslog
    state: restarted
  when:
    - copy_rsyslog_slapd_conf_task.changed

- name: Configure logrotate for slapd
  copy:
    src: "{{ role_path }}/files/main_slapd"
    dest: /etc/logrotate.d/slapd
    owner: root
    group: root
    mode: 0644

#
# Restore backups
#

- name: Check if config backup exists
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_config.ldif"
  register: config_backup_on_localhost
  when: push_config

- name: Check if mdb backup exists
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_mdb.ldif"
  register: mdb_backup_on_localhost
  when: push_config

- fail:
    msg: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_config.ldif does not exist"
  when:
  - push_config
  - not config_backup_on_localhost.stat.exists

- fail:
    msg: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_mdb.ldif does not exist"
  when:
  - push_config
  - not mdb_backup_on_localhost.stat.exists

- name: Copy backups into the container
  copy:
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/srv/slapd/backup_{{ item }}.ldif"
    dest: /tmp/slapd/
  loop:
  - config
  - mdb
  when: push_config

- name: Stop slapd service
  systemd:
    name: slapd
    state: stopped
  when: push_config

- name: Delete files in "/etc/ldap/slapd.d"
  file:
    path: /etc/ldap/slapd.d
    state: "{{ item }}"
    owner: openldap
    group: openldap
  loop:
  - absent
  - directory
  when: push_config

- name: Restore "cn=config" database
  become: yes
  become_user: openldap
  command: slapadd -F /etc/ldap/slapd.d -b cn=config -l /tmp/slapd/backup_config.ldif
  when: push_config

- name: Delete files in "/var/lib/ldap"
  file:
    path: /var/lib/ldap
    state: "{{ item }}"
    owner: openldap
    group: openldap
  loop:
  - absent
  - directory
  when: push_config

- name: Restore "{{ ldap_rootdn }}" database
  become: yes
  become_user: openldap
  command: slapadd -F /etc/ldap/slapd.d -b "{{ ldap_rootdn }}" -l /tmp/slapd/backup_mdb.ldif
  when: push_config

- name: Start slapd service
  systemd:
    name: slapd
    state: started
  when: push_config

#
# Configure LDAP databases
#

#- name: Change access to "cn=config"
#  ldap_attr:
#    dn: olcDatabase={0}config,cn=config
#    name: olcAccess
#    values: to * by dn.exact=cn=admin,{{ ldap_rootdn }} manage by * break
#    state: exact
#    validate_certs: no

#- name: Change loglevel to "stats"
#  ldap_attr:
#    dn: cn=config
#    name: olcLogLevel
#    values: stats
#    state: exact
#    validate_certs: no

- set_fact:
    ldapsearch_command: ldapsearch -o ldif-wrap=no -Q -Y external -H ldapi:///
    ldapmodify_command: ldapmodify -Y external -H ldapi:///
    config_olcLogLevel: stats
    config_olcAccess: to * by dn.exact=cn=admin,{{ ldap_rootdn }} manage by * break
    config_olcTLSCACertificateFile: /etc/ssl/certs/ca.crt
    config_olcTLSCertificateFile: /etc/ssl/certs/{{ ldap_certificate }}.crt
    config_olcTLSCertificateKeyFile: /etc/ssl/private/{{ ldap_certificate }}.key
    config_olcPasswordHash: "{CRYPT}"
    config_olcPasswordCryptSaltFormat: $6$%.16s

# olcLogLevel for cn=config

- name: Copy file config_olcLogLevel_modify.ldif
  template:
    src: "{{ role_path }}/templates/main_config_olcLogLevel_modify.ldif.j2"
    dest: /srv/slapd/config_olcLogLevel_modify.ldif

- name: Execute ldapsearch to get olcLogLevel attribute value for cn=config
  command: "{{ ldapsearch_command }} -b cn=config '(cn=config)' olcLogLevel -LLL"
  register: ldapsearch_config_olcLogLevel
  changed_when: False

- name: Extract olcLogLevel attribute value from previous ldapsearch
  set_fact:
    current_config_olcLogLevel: "{{ ldapsearch_config_olcLogLevel.stdout_lines | select('match', 'olcLogLevel:') | list | join('') | regex_replace('olcLogLevel: ', '') }}"

- name: Modify olcLogLevel attribute for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcLogLevel_modify.ldif"
  when: config_olcLogLevel != current_config_olcLogLevel

# olcPassword... for cn=config

- name: Copy olcPassword LDIF files
  template:
    src: "{{ role_path }}/templates/main_config_{{ item }}.ldif.j2"
    dest: /srv/slapd/config_{{ item }}.ldif
  loop:
  - olcPassword_attributes_add
  - olcPasswordHash_modify
  - olcPasswordCryptSaltFormat_modify

- name: Execute ldapsearch to get olcPasswordHash attribute value for "cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(cn=config)' olcPasswordHash -LLL"
  register: ldapsearch_config_olcPasswordHash
  changed_when: False

- name: Execute ldapsearch to get olcPasswordCryptSaltFormat attribute value for "cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(cn=config)' olcPasswordCryptSaltFormat -LLL"
  register: ldapsearch_config_olcPasswordCryptSaltFormat
  changed_when: False

- name: Extract olcPassword... attributes values from previous ldapsearches
  set_fact:
    current_config_olcPasswordHash: "{{ ldapsearch_config_olcPasswordHash.stdout | regex_replace('\\n', '') | regex_replace('.*olcPasswordHash::? (.*)', '\\1') }}"
    current_config_olcPasswordCryptSaltFormat: "{{ ldapsearch_config_olcPasswordCryptSaltFormat.stdout | regex_replace('\\n', '') | regex_replace('.*olcPasswordCryptSaltFormat::? (.*)', '\\1') }}"

- name: Add olcPassword... attributes for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcPassword_attributes_add.ldif"
  when:
  - "current_config_olcPasswordHash == 'dn: cn=config'"
  - "current_config_olcPasswordCryptSaltFormat == 'dn: cn=config'"

- name: Modify olcPasswordHash attribute for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcPasswordHash_modify.ldif"
  when:
  - current_config_olcPasswordHash != config_olcPasswordHash
  - "current_config_olcPasswordHash != 'dn: cn=config'"

- name: Modify olcPasswordCryptSaltFormat attribute for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcPasswordCryptSaltFormat_modify.ldif"
  when:
  - current_config_olcPasswordCryptSaltFormat != config_olcPasswordCryptSaltFormat
  - "current_config_olcPasswordCryptSaltFormat != 'dn: cn=config'"

# olcRootPW for cn=config

- name: Copy olcRootPW LDIF file
  template:
    src: "{{ role_path }}/templates/main_config_olcRootPW_delete.ldif.j2"
    dest: /srv/slapd/config_olcRootPW_delete.ldif

- name: Execute ldapsearch to get olcRootPW attribute value for "cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(olcDatabase={1}mdb)' olcRootPW -LLL"
  register: ldapsearch_config_olcRootPW
  changed_when: False

- name: Extract olcRootPW attribute value from previous ldapsearch
  set_fact:
    current_config_olcRootPW: "{{ ldapsearch_config_olcRootPW.stdout | regex_replace('\\n', '') | regex_replace('.*olcRootPW::? (.*)', '\\1') }}"

- name: Delete olcRootPW attribute for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcRootPW_delete.ldif"
  when:
  - "current_config_olcRootPW != 'dn: olcDatabase={1}mdb,cn=config'"

# olcTLS... for cn=config

- name: Copy olcTLS LDIF files
  template:
    src: "{{ role_path }}/templates/main_config_{{ item }}.ldif.j2"
    dest: /srv/slapd/config_{{ item }}.ldif
  loop:
  - olcTLS_attributes_add
  - olcTLSCACertificateFile_modify
  - olcTLSCertificateFile_modify
  - olcTLSCertificateKeyFile_modify

- name: Execute ldapsearch to get olcTLSCACertificateFile attribute value for "cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(cn=config)' olcTLSCACertificateFile -LLL"
  register: ldapsearch_config_olcTLSCACertificateFile
  changed_when: False

- name: Execute ldapsearch to get olcTLSCertificateFile attribute value for "cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(cn=config)' olcTLSCertificateFile -LLL"
  register: ldapsearch_config_olcTLSCertificateFile
  changed_when: False

- name: Execute ldapsearch to get olcTLSCertificateKeyFile attribute value for "cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(cn=config)' olcTLSCertificateKeyFile -LLL"
  register: ldapsearch_config_olcTLSCertificateKeyFile
  changed_when: False

- name: Extract olcTLS... attributes values from previous ldapsearches
  set_fact:
    current_config_olcTLSCACertificateFile: "{{ ldapsearch_config_olcTLSCACertificateFile.stdout | regex_replace('\\n', '') | regex_replace('.*olcTLSCACertificateFile::? (.*)', '\\1') }}"
    current_config_olcTLSCertificateFile: "{{ ldapsearch_config_olcTLSCertificateFile.stdout | regex_replace('\\n', '') | regex_replace('.*olcTLSCertificateFile::? (.*)', '\\1') }}"
    current_config_olcTLSCertificateKeyFile: "{{ ldapsearch_config_olcTLSCertificateKeyFile.stdout | regex_replace('\\n', '') | regex_replace('.*olcTLSCertificateKeyFile::? (.*)', '\\1') }}"

- name: Add olcTLS... attributes for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcTLS_attributes_add.ldif"
  when:
  - "current_config_olcTLSCACertificateFile == 'dn: cn=config'"
  - "current_config_olcTLSCertificateFile == 'dn: cn=config'"
  - "current_config_olcTLSCertificateKeyFile == 'dn: cn=config'"

- name: Modify olcTLSCACertificateFile attribute for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcTLSCACertificateFile_modify.ldif"
  when:
  - current_config_olcTLSCACertificateFile != config_olcTLSCACertificateFile
  - "current_config_olcTLSCACertificateFile != 'dn: cn=config'"

- name: Modify olcTLSCertificateFile attribute for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcTLSCertificateFile_modify.ldif"
  when:
  - current_config_olcTLSCertificateFile != config_olcTLSCertificateFile
  - "current_config_olcTLSCertificateFile != 'dn: cn=config'"

- name: Modify olcTLSCertificateKeyFile attribute for "cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcTLSCertificateKeyFile_modify.ldif"
  when:
  - current_config_olcTLSCertificateKeyFile != config_olcTLSCertificateKeyFile
  - "current_config_olcTLSCertificateKeyFile != 'dn: cn=config'"

# olcAccess for olcDatabase={0}config,cn=config

- name: Copy file config_olcAccess.ldif
  template:
    src: "{{ role_path }}/templates/main_config_olcAccess_modify.ldif.j2"
    dest: /srv/slapd/config_olcAccess_modify.ldif

- name: Execute ldapsearch to get olcAccess attribute value for "olcDatabase={0}config,cn=config"
  command: "{{ ldapsearch_command }} -b cn=config '(olcDatabase={0}config)' olcAccess -LLL"
  register: ldapsearch_config_olcAccess
  changed_when: False

- name: Extract olcAccess attribute value from previous ldapsearch
  set_fact:
    current_config_olcAccess: "{{ ldapsearch_config_olcAccess.stdout | regex_replace('\\n', '') | regex_replace('.*olcAccess: \\{0\\}(.*)', '\\1') }}"

- name: Modify olcAccess attribute for "olcDatabase={0}config,cn=config"
  command: "{{ ldapmodify_command }} -f /srv/slapd/config_olcAccess_modify.ldif"
  when: config_olcAccess != current_config_olcAccess

#
# Backup the databases
#

- name: Make a backup of "cn=config" database
  command: slapcat -o ldif-wrap=no -b cn=config -l /srv/slapd/backup_config.ldif
  changed_when: False

- name: Make a backup of "{{ ldap_rootdn }}" database
  command: slapcat -o ldif-wrap=no -b "{{ ldap_rootdn }}" -l /srv/slapd/backup_mdb.ldif
  changed_when: False

- name: Fetch the databases backups
  fetch:
    src: "{{ item }}"
    dest: "{{ minidc_working_directory }}"
  loop:
  - /srv/slapd/backup_config.ldif
  - /srv/slapd/backup_mdb.ldif
  when: not push_config
