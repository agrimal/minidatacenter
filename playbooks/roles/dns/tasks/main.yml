---
# role dns - file main.yml

- name: Update repositories cache and install bind9 relative packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} update_cache=yes cache_valid_time=3600 state=present
  with_items:
    - bind9
    - bind9-doc
    - python3-dns
    - python3-dnsq
    - python3-pip

- name: Create /var/log/bind directory
  file:
    path: /var/log/bind
    state: directory
    mode: 0755
    owner: bind
    group: bind

- name: Disable and stop the systemd-resolved service
  systemd:
    name: systemd-resolved
    state: stopped
    enabled: no

- name: Modify /etc/resolv.conf
  template:
    src: "{{ role_path }}/templates/main_resolv.conf.j2"
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644

- name: Modify /etc/default/bind9
  replace:
    path: /etc/default/bind9
    regexp: '^OPTIONS="-u bind"$'
    replace: 'OPTIONS="-u bind -4 -n 2"'
  register: etc_default_bind9_task

# localhost
- name: Check if "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind" exists on localhost
  local_action:
    module: stat
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
  register: local_etc_bind

# remote
- name: Check if "/etc/bind" exists
  stat:
    path: /etc/bind
  register: remote_etc_bind

# localhost
- name: Find ".key" and ".private" files in "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind" on localhost
  local_action:
    module: find
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind/"
    use_regex: yes
    patterns: '^K.*\.(key|private)$'
    recurse: no
  when:
    - not ansible_renew_all # This task is useless if we want to clean everything
    - local_etc_bind.stat.exists
  register: local_etc_bind_find_result

# remote
- name: Find ".key" and ".private" files in "/etc/bind"
  find:
    path: /etc/bind
    use_regex: yes
    patterns: '^K.*\.(key|private)$'
    recurse: no
  when:
    - remote_etc_bind.stat.exists
  register: remote_etc_bind_find_result

# localhost
- name: Generate the list of ".key" and ".private" files in "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind" on localhost
  set_fact:
    local_tsig_key_files: "{{ local_etc_bind_find_result.files | map(attribute='path') | list }}"
  when:
    - not ansible_renew_all # This task is useless if we want to clean everything
    - local_etc_bind.stat.exists

# remote
- name: Generate the list of ".key" and ".private" files in "/etc/bind"
  set_fact:
    remote_tsig_key_files: "{{ remote_etc_bind_find_result.files | map(attribute='path') | list }}"
  when:
#    - not ansible_renew_all # This task is useless if we want to clean everything
    - remote_etc_bind.stat.exists

- name: Decide wether all TSIG files should be deleted or not
  set_fact:
    ansible_renew_all: True
  when:
    - ansible_renew_all or
      (local_tsig_key_files is defined) and (local_tsig_key_files | length != 2) or
      (remote_tsig_key_files is defined) and (remote_tsig_key_files | length != 2)

# localhost
- name: Delete all files in "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
  local_action:
    module: file
    state: "{{ item }}"
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
    owner: root
    group: root
    mode: 0755
  with_items:
    - absent
    - directory
  when:
    - ansible_renew_all
  register: local_etc_bind_delete_task

# remote
- name: Delete ".key" and ".private" files in "/etc/bind"
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ remote_tsig_key_files }}"
  when:
    - ansible_renew_all
  register: remote_etc_bind_delete_task

# Generate new TSIG files
- name: Generate TSIG key "{{ dns_tsig_key_name }}"
  #shell: dnssec-keygen -a HMAC-SHA512 -b 512 -K /etc/bind -r /dev/urandom -n HOST "{{ dns_tsig_key_name }}"
  command: dnssec-keygen -a HMAC-SHA512 -b 512 -K /etc/bind -r /dev/urandom -n HOST "{{ dns_tsig_key_name }}"
  #args:
  #  executable: /bin/bash
  when:
    - ansible_renew_all
  register: tsig_key_generate_task

# Fetch them is new
- name: Fetch the newly TSIG key files from /etc/bind to "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
  fetch:
    src: "/etc/bind/{{ item }}"
    dest: "{{ ansible_working_directory }}"
  with_items:
    - "{{ tsig_key_generate_task.stdout + '.private' }}"
    - "{{ tsig_key_generate_task.stdout + '.key' }}"
  when:
    - ansible_renew_all

# Else verify local against remote keys
- name: Verify the TSIG key files in /etc/bind are identical to those in "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
  fetch:
    src: "{{ item }}"
    dest: "{{ ansible_working_directory }}"
  with_items:
    - "{{ remote_tsig_key_files }}"
  when:
    - remote_tsig_key_files is defined
    - not ansible_renew_all

- name: Read ".key" file when it was generated
  local_action:
    module: slurp
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind/{{ tsig_key_generate_task.stdout }}.key"
  when:
    - ansible_renew_all
  register: local_tsig_key_private_file_changed

- name: Read ".key" file when it was not changed
  local_action:
    module: slurp
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}{{ item }}"
  with_items:
    - "{{ remote_tsig_key_files | select('match', '^.*key$') | list }}"
  when:
    - not ansible_renew_all
  register: local_tsig_key_private_file_unchanged

- name: Extract key name and secret from ".key" file
  set_fact:
    dns_tsig_key_secret: "{{ item.content | b64decode | regex_replace('^.* IN KEY [0-9]{3} [0-9] [0-9]{3} (.*) (.*)\n$', '\\1\\2') }}"
    dns_tsig_key_name: "{{ item.content | b64decode | regex_replace('^(.*)\\. IN KEY.*\n$', '\\1') }}"
  with_items:
    - "{{ local_tsig_key_private_file_unchanged.results }}"
  when:
    - not ansible_renew_all

- name: Extract key name and secret from ".key" file when it was generated
  set_fact:
    dns_tsig_key_secret: "{{ item.content | b64decode | regex_replace('^.* IN KEY [0-9]{3} [0-9] [0-9]{3} (.*) (.*)\n$', '\\1\\2') }}"
    dns_tsig_key_name: "{{ item.content | b64decode | regex_replace('^(.*)\\. IN KEY.*\n$', '\\1') }}"
  with_items:
    - "{{ local_tsig_key_private_file_changed }}"
  when:
    - ansible_renew_all

- name: Convert TSIG key for being readable by bind and push it into "/etc/bind/named.conf.tsigkeys"
  template:
    src: "{{ role_path }}/templates/main_tsig_key.j2"
    dest: /etc/bind/named.conf.tsigkeys
    owner: root
    group: bind
    mode: 0644

- name: Generate the "named.conf.options" file
  template:
    src: "{{ role_path }}/templates/main_named.conf.options.j2"
    dest: /etc/bind/named.conf.options
    owner: root
    group: bind
    mode: 0644
  register: etc_bind_named_conf_options_task

- name: Copy the "named.conf.logs" file
  copy:
    src: "{{ role_path }}/files/main_named.conf.logs"
    dest: /etc/bind/named.conf.logs
    owner: root
    group: bind
    mode: 0644
  register: etc_bind_named_conf_logs_task

- name: Initialize dictionnary to store PTR zones
  set_fact:
    dns_master_ptr_zones: {}

- name: Calculate the PTR zones when network mask is greater than 1 and lesser than 9
  set_fact:
    dns_master_ptr_zones: "{{ dns_master_ptr_zones | combine( { item.key: item.value | ipaddr('revdns') | regex_replace('^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.', '') } ) }}"
  with_dict: "{{ dns_master_zones }}"
  when:
    - 1 < (item.value | ipaddr('prefix')) < 9

- name: Calculate the PTR zones when network mask is greater than 8 and lesser than 17
  set_fact:
    dns_master_ptr_zones: "{{ dns_master_ptr_zones | combine( { item.key: item.value | ipaddr('revdns') | regex_replace('^[0-9]{1,3}\\.[0-9]{1,3}\\.', '') } ) }}"
  with_dict: "{{ dns_master_zones }}"
  when:
    - 8 < (item.value | ipaddr('prefix')) < 17

- name: Calculate the PTR zones when network mask is greater than 16
  set_fact:
    dns_master_ptr_zones: "{{ dns_master_ptr_zones | combine( { item.key: item.value | ipaddr('revdns') | regex_replace('^[0-9]{1,3}\\.', '') } ) }}"
  with_dict: "{{ dns_master_zones }}"
  when:
    - 16 < (item.value | ipaddr('prefix'))

- name: Generate the "named.conf.local" file
  template:
    src: "{{ role_path }}/templates/main_named.conf.local.j2"
    dest: /etc/bind/named.conf.local
    owner: root
    group: bind
    mode: 0644
  register: etc_bind_named_conf_local_task

- name: Copy the "named.conf" file
  copy:
    src: "{{ role_path }}/files/main_named.conf"
    dest: /etc/bind/named.conf
    owner: root
    group: bind
    mode: 0644
  register: etc_bind_named_conf_task

- name: Create dynamic forward zone files
  template:
    src: "{{ role_path }}/templates/main_db_forward.j2"
    dest: "/var/lib/bind/db.{{ item.key }}"
  with_dict: "{{ dns_master_zones }}"
  register: dynamic_forward_zones_task

- name: Create dynamic reverse zone files
  template:
    src: "{{ role_path }}/templates/main_db_reverse.j2"
    dest: "/var/lib/bind/db.{{ item.value | regex_replace('.in-addr.arpa.', '') }}"
  with_dict: "{{ dns_master_ptr_zones }}"
  register: dynamic_reverse_zones_task

- include_tasks: logrotate.yml

- name: Verify bind configuration
  command: named-checkconf -z
  changed_when: False

- name: Reload bind
  systemd:
    name: bind9
    state: reloaded
  when:
    - ansible_renew_all or
      etc_bind_named_conf_options_task.changed or
      etc_bind_named_conf_logs_task.changed or
      etc_bind_named_conf_local_task.changed or
      etc_bind_named_conf_task.changed or
      dynamic_forward_zones_task.changed or
      dynamic_reverse_zones_task.changed

- debug:
    var: dns_master_zones

- set_fact:
    reversed_forward_dict: {}

- set_fact:
    reversed_forward_dict: "{{ reversed_forward_dict | combine( { item.value : item.key } ) }}"
  with_dict: "{{ dns_master_zones }}"

- debug:
    msg: "zone = {{ reversed_forward_dict[ item.1 | ipaddr('network/prefix') ] }}"
  with_subelements:
    - "{{ all_hosts_ips }}"
    - "ip"

- name: Fill the DNS server with records
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ reversed_forward_dict[ item.1 | ipaddr('network/prefix') ] }}"
    record: "{{ item.0.name }}"
    value: "{{ item.1 | ipaddr('address') }}"
  with_subelements:
    - "{{ all_hosts_ips }}"
    - "ip"


