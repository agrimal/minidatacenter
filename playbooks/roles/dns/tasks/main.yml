---
# role dns - file main.yml

- name: Update repositories cache and install bind9 relative packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} update_cache=yes cache_valid_time=3600 state=present
  with_items:
    - bind9
    - bind9-doc
    - python3-dns
    - python3-dnsq
    - python3-pip

- name: Create /var/log/bind directory
  file:
    path: /var/log/bind
    state: directory
    mode: 0755
    owner: bind
    group: bind

- name: Disable and stop the systemd-resolved service
  systemd:
    name: systemd-resolved
    state: stopped
    enabled: no

- name: Modify /etc/resolv.conf
  template:
    src: "{{ role_path }}/templates/main_resolv.conf.j2"
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644

- name: Modify /etc/default/bind9
  replace:
    path: /etc/default/bind9
    regexp: '^OPTIONS="-u bind"$'
    replace: 'OPTIONS="-u bind -4 -n 2"'

# localhost
- name: Check if "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind" exists on localhost
  local_action:
    module: stat
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
  register: local_etc_bind

# remote
- name: Check if "/etc/bind" exists
  stat:
    path: /etc/bind
  register: remote_etc_bind

# localhost
- name: Find ".key" and ".private" files in "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind" on localhost
  local_action:
    module: find
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind/"
    use_regex: yes
    patterns: '^K.*\.(key|private)$'
    recurse: no
  when:
    - not ansible_renew_all # This task is useless if we want to clean everything
    - local_etc_bind.stat.exists
  register: local_etc_bind_find_result

# remote
- name: Find ".key" and ".private" files in "/etc/bind"
  find:
    path: /etc/bind
    use_regex: yes
    patterns: '^K.*\.(key|private)$'
    recurse: no
  when:
    - remote_etc_bind.stat.exists
  register: remote_etc_bind_find_result

# localhost
- name: Generate the list of ".key" and ".private" files in "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind" on localhost
  set_fact:
    local_tsig_key_files: "{{ local_etc_bind_find_result.files | map(attribute='path') | list }}"
  when:
    - not ansible_renew_all # This task is useless if we want to clean everything
    - local_etc_bind.stat.exists

- debug:
    var: remote_etc_bind

# remote
- name: Generate the list of ".key" and ".private" files in "/etc/bind"
  set_fact:
    remote_tsig_key_files: "{{ remote_etc_bind_find_result.files | map(attribute='path') | list }}"
  when:
#    - not ansible_renew_all # This task is useless if we want to clean everything
    - remote_etc_bind.stat.exists

- name: Decide wether all TSIG files should be deleted or not
  set_fact:
    ansible_renew_all: True
  when:
    - ansible_renew_all or
      (local_tsig_key_files is defined) and (local_tsig_key_files | length != 2) or
      (remote_tsig_key_files is defined) and (remote_tsig_key_files | length != 2)

# localhost
- name: Delete all files in "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
  local_action:
    module: file
    state: "{{ item }}"
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
    owner: root
    group: root
    mode: 0755
  with_items:
    - absent
    - directory
  when:
    - ansible_renew_all
  register: local_etc_bind_delete_task

# remote
- name: Delete ".key" and ".private" files in "/etc/bind"
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ remote_tsig_key_files }}"
  when:
    - ansible_renew_all
  register: remote_etc_bind_delete_task

# Generate new TSIG files
- name: Generate TSIG key "{{ dns_tsig_key_name }}"
  shell: dnssec-keygen -a HMAC-SHA512 -b 512 -K /etc/bind -r /dev/urandom -n HOST "{{ dns_tsig_key_name }}"
  args:
    executable: /bin/bash
  when:
    - ansible_renew_all
  register: tsig_key_generate_task

# Fetch them is new
- name: Fetch the newly TSIG key files from /etc/bind to "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
  fetch:
    src: "/etc/bind/{{ item }}"
    dest: "{{ ansible_working_directory }}"
  with_items:
    - "{{ tsig_key_generate_task.stdout + '.private' }}"
    - "{{ tsig_key_generate_task.stdout + '.key' }}"
  when:
    - ansible_renew_all

# Else verify local against remote keys
- name: Verify the TSIG key files in /etc/bind are identical to those in "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind"
  fetch:
    src: "{{ item }}"
    dest: "{{ ansible_working_directory }}"
  with_items:
    - "{{ remote_tsig_key_files }}"
  when:
    - remote_tsig_key_files is defined
    - not ansible_renew_all

- name: Read ".key" file when it was generated
  local_action:
    module: slurp
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}/etc/bind/{{ tsig_key_generate_task.stdout }}.key"
  when:
    - ansible_renew_all
  register: local_tsig_key_private_file_changed

- name: Read ".key" file when it was not changed
  local_action:
    module: slurp
    path: "{{ ansible_working_directory }}/{{ inventory_hostname }}{{ item }}"
  with_items:
    - "{{ remote_tsig_key_files | select('match', '^.*key$') | list }}"
  when:
    - not ansible_renew_all
  register: local_tsig_key_private_file_unchanged

# Here the (?s) allow the '.' to match any character, including '\n' which is not the default behavior.
# See https://docs.python.org/3/library/re.html (?imsx-imsx:...) for more information
- name: Extract key name and secret from ".key" file
  set_fact:
    dns_tsig_key_secret: "{{ item.content | b64decode | regex_replace('^.* IN KEY [0-9]{3} [0-9] [0-9]{3} (.*) (.*)\n$', '\\1\\2') }}"
    dns_tsig_key_name: "{{ item.content | b64decode | regex_replace('^(.*)\\. IN KEY.*\n$', '\\1') }}"
  with_items:
    - "{{ local_tsig_key_private_file_unchanged.results }}"
  when:
    - not ansible_renew_all

- name: Extract key name and secret from ".key" file when it was generated
  set_fact:
    dns_tsig_key_secret: "{{ item.content | b64decode | regex_replace('^.* IN KEY [0-9]{3} [0-9] [0-9]{3} (.*) (.*)\n$', '\\1\\2') }}"
    dns_tsig_key_name: "{{ item.content | b64decode | regex_replace('^(.*)\\. IN KEY.*\n$', '\\1') }}"
  with_items:
    - "{{ local_tsig_key_private_file_changed }}"
  when:
    - ansible_renew_all

- name: Convert TSIG key for being readable by bind and isc-dhcpd
  template:
    src: "{{ role_path }}/templates/main_tsig_key.j2"
    dest: /etc/bind/named.conf.tsigkeys
    owner: root
    group: root
    mode: 0644

  




#    easy_rsa_source_dir: "/usr/share/easy-rsa"
#
#
#- name: Create the directory "{{ ca_easy_rsa_install_dir }}" 
#  file:
#    path: "{{ ca_easy_rsa_install_dir }}"
#    state: directory
#    mode: 0750
#
## Get a recursive list of all files in source_dir
#- name: List files and directories in "{{ easy_rsa_source_dir }}"
#  find:
#    path: "{{ easy_rsa_source_dir }}"
#    recurse: yes
#    file_type: any
#  register: find_result_easy_rsa_source_dir
#
## Copy directories but not files
#- name: Create in "{{ ca_easy_rsa_install_dir }}" the directories found in "{{ easy_rsa_source_dir }}" 
#  file:
#    path: "{{ item.path | regex_replace(easy_rsa_source_dir, ca_easy_rsa_install_dir) }}"
#    state: directory
#    mode: "{{ item.mode }}"
#  with_items:
#    - "{{ find_result_easy_rsa_source_dir.files }}"
#  when:
#    - item.isdir
#
## Copy all files except directories and 'vars'
#- name: Copy the files (except 'vars') from "{{ easy_rsa_source_dir }}" to "{{ ca_easy_rsa_install_dir }}"
#  copy:
#    src: "{{ item.path }}"
#    dest: "{{ item.path | regex_replace(easy_rsa_source_dir, ca_easy_rsa_install_dir) }}"
#    remote_src: yes
#    mode: "{{ item.mode }}"
#  with_items:
#    - "{{ find_result_easy_rsa_source_dir.files }}"
#  when:
#    - (item.isdir == False) and (item.path != (easy_rsa_source_dir + "/vars"))
#
#- name: Create the directory "keys" in "{{ ca_easy_rsa_install_dir }}"
#  file:
#    path: "{{ ca_easy_rsa_install_dir }}/keys"
#    state: directory
#    mode: 0700
#

## Delete every key and certificate if ansible_renew_all is set to True in config.yml
#- name: Clean all previously generated keys and certificates
#  shell: . vars && ./clean-all
#  args:
#    chdir: "{{ ca_easy_rsa_install_dir }}"
#    executable: /bin/bash
#  when:
#    - ansible_renew_all
#
## Get a recursive list of all files in source_dir
#- name: List files in "{{ ca_easy_rsa_install_dir }}/keys"
#  find:
#    path: "{{ ca_easy_rsa_install_dir }}/keys"
#    recurse: no
#    file_type: file
#  register: find_result_ca_easy_rsa_install_dir_keys
#
## Create the list of files present in ca_easy_rsa_install_dir/keys
#- set_fact:
#    files_in_keys_directory: "{{ find_result_ca_easy_rsa_install_dir_keys.files | map(attribute='path') | list }}"
#
## Only generate if ca.crt or ca.key are not in ca_easy_rsa_install_dir/keys
#- name: Generate the CA private key and certificate
#  shell: source vars && ./clean-all && ./pkitool --initca
#  args:
#    chdir: "{{ ca_easy_rsa_install_dir }}"
#    executable: /bin/bash
#  when:
#    - (ca_easy_rsa_install_dir + "/keys/ca.crt") not in files_in_keys_directory or
#      (ca_easy_rsa_install_dir + "/keys/ca.key") not in files_in_keys_directory or
#      (ca_easy_rsa_install_dir + "/keys/index.txt") not in files_in_keys_directory
#
## Only generate if dh.pem is not in ca_easy_rsa_install_dir/keys
#- name: Generate the Diffie-Hellman key
#  shell: source vars && ./build-dh
#  args:
#    chdir: "{{ ca_easy_rsa_install_dir }}"
#    executable: /bin/bash
#  when:
#    - (ca_easy_rsa_install_dir + "/keys/dh" + ca_key_size + ".pem") not in files_in_keys_directory
#  register: diffie_hellman_generation
## The following doesn't work as of ansible 2.4.3, have to have for 2.4.4 where bug is fixed.
##  async: 300
##  poll: 5
#
## Slurp index.txt
#- name: Read "{{ ca_easy_rsa_install_dir }}/keys/index.txt"
#  slurp:
#    src: "{{ ca_easy_rsa_install_dir }}/keys/index.txt"
#  register: index_txt
#
#- name: Generate the list of the certificates still valid for the ca
#  set_fact:
#    valid_certificates_for_ca: "{{ index_txt['content'] | b64decode | regex_findall('V\t.*\n') | map('regex_replace', '^V.*/CN=(.*)/name=.*\n$', '\\1') | list }}"
#    revoked_certificates_for_ca: "{{ index_txt['content'] | b64decode | regex_findall('R\t.*\n') | map('regex_replace', '^R.*/CN=(.*)/name=.*\n$', '\\1') | list }}"
#
## Only generate if server_name.crt or server_name.key are not in ca_easy_rsa_install_dir/keys or if the certificate is revoked
#- name: Generate the servers private keys and certificates
#  shell: . vars && ./pkitool --server "{{ item }}"
#  args:
#    chdir: "{{ ca_easy_rsa_install_dir }}"
#    executable: /bin/bash
#  with_items:
#    - "{{ ca_certificates.servers }}"
#  when:
#    - (ca_easy_rsa_install_dir + "/keys/" + item + ".key") not in files_in_keys_directory or
#      (ca_easy_rsa_install_dir + "/keys/" + item + ".crt") not in files_in_keys_directory or
#      item not in valid_certificates_for_ca
#
## Only generate if client_name.crt or client_name.key are not in ca_easy_rsa_install_dir/keys or if the certificate is revoked
#- name: Generate the clients private keys and certificates
#  shell: source vars && ./pkitool "{{ item }}"
#  args:
#    chdir: "{{ ca_easy_rsa_install_dir }}"
#    executable: /bin/bash
#  with_items:
#    - "{{ ca_certificates.clients }}"
#  when:
#    - (ca_easy_rsa_install_dir + "/keys/" + item + ".key") not in files_in_keys_directory or
#      (ca_easy_rsa_install_dir + "/keys/" + item + ".crt") not in files_in_keys_directory or
#      item not in valid_certificates_for_ca
#
## Revoke certificates not in the allowed lists
#- name: Revoke the certificates removed from config file
#  shell: source vars && ./revoke-full "{{ item }}"
#  args:
#    chdir: "{{ ca_easy_rsa_install_dir }}"
#    executable: /bin/bash
#  with_items:
#    - "{{ valid_certificates_for_ca }}"
#  when:
#    - item not in ca_certificates.servers
#    - item not in ca_certificates.clients
#  register: revoke_result
#  failed_when: revoke_result.rc != 2
#
## The following doesn't work as of ansible 2.4.3, have to have for 2.4.4 where bug is fixed.
##- name: Waiting for Diffie-Hellman key to be generated
##  async_status:
##    jid: "{{ diffie_hellman_generation.ansible_job_id }}"
##  register: job_result
##  until: job_result.finished
##  retries: 30
#
## Copy all keys and certificates on localhost
#- name: Copy keys and certificates on localhost in "{{ ansible_working_directory }}"
#  fetch:
#    src: "{{ ca_easy_rsa_install_dir }}/keys/{{ item }}"
#    dest: "{{ ansible_working_directory }}"
#  with_items:
#    - "{{ ca_certificates.clients | map('regex_replace', '^(.*)$', '\\1.crt') | list }}"
#    - "{{ ca_certificates.clients | map('regex_replace', '^(.*)$', '\\1.key') | list }}"
#    - "{{ ca_certificates.servers | map('regex_replace', '^(.*)$', '\\1.crt') | list }}"
#    - "{{ ca_certificates.servers | map('regex_replace', '^(.*)$', '\\1.key') | list }}"
#    - "ca.crt"
#    - "ca.key"
#    - "dh{{ ca_key_size }}.pem"
