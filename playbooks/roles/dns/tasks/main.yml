---
- name: Install packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} update_cache=yes cache_valid_time=3600 state=latest
  with_list:
  - bind9
  - bind9-doc
  - python3-dns
  - python3-dnsq

- name: Verify all packages are up-to-date
  apt:
    upgrade: yes
    force_apt_get: yes

- name: clears out the local repository of retrieved package files
  command: apt-get clean warn=false
  changed_when: false

- name: Be sure the "/var/log/bind" directory exists
  file:
    path: /var/log/bind
    state: directory
    mode: 0755
    owner: bind
    group: bind

- name: Be sure the systemd-resolved service is stopped and disabled
  systemd:
    name: systemd-resolved
    state: stopped
    enabled: no

- name: Generate "/etc/resolv.conf"
  template:
    src: "{{ role_path }}/templates/main_resolv.conf.j2"
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644

- name: Be sure the "/etc/bind" directory exists
  file:
    path: /etc/bind
    state: directory
    mode: 0755
    owner: bind
    group: root

- name: Modify "/etc/default/bind9" to listen to IPv4 only and work whith 4 threads
  lineinfile:
    path: /etc/default/bind9
    regexp: '^OPTIONS="'
    line: 'OPTIONS="-u bind -4 -n 4"'
  register: etc_default_bind9_task

- name: Generate "/etc/bind/named.conf.options"
  template:
    src: "{{ role_path }}/templates/main_named.conf.options.j2"
    dest: /etc/bind/named.conf.options
    owner: root
    group: bind
    mode: 0644
  register: etc_bind_named_conf_options_task

- name: Copy "/etc/bind/named.conf.logs"
  copy:
    src: "{{ role_path }}/files/main_named.conf.logs"
    dest: /etc/bind/named.conf.logs
    owner: root
    group: bind
    mode: 0644
  register: etc_bind_named_conf_logs_task

- name: Copy "/etc/bind/named.conf"
  copy:
    src: "{{ role_path }}/files/main_named.conf"
    dest: "/etc/bind/named.conf"
    owner: root
    group: bind
    mode: 0644
  register: etc_bind_named_conf_task

- include_tasks: logrotate.yml

#################################################################################
################################ TSIG keys ######################################
#################################################################################

- name: Check if "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind" exists on localhost
  local_action:
    module: stat
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind"
  register: local_etc_bind

- name: Find "*.key" and "*.private" files in "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind" on localhost
  local_action:
    module: find
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind/"
    use_regex: yes
    patterns: '^K.*\.(key|private)$'
    recurse: no
  when:
  - not renew_all_secrets
  - local_etc_bind.stat.exists
  register: local_etc_bind_find_result

- name: Find "*.key" and "*.private" files in "/etc/bind"
  find:
    path: /etc/bind
    use_regex: yes
    patterns: '^K.*\.(key|private)$'
    recurse: no
  register: remote_etc_bind_find_result

- name: Generate the list of "*.key" and "*.private" files in "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind" on localhost
  set_fact:
    local_tsig_key_files: "{{ local_etc_bind_find_result.files | map(attribute='path') | list }}"
  when:
  - not renew_all_secrets
  - local_etc_bind.stat.exists

- name: Generate the list of "*.key" and "*.private" files in "/etc/bind"
  set_fact:
    remote_tsig_key_files: "{{ remote_etc_bind_find_result.files | map(attribute='path') | list }}"

- name: Decide wether all TSIG files should be deleted or not
  set_fact:
    renew_all_secrets: True
  when: renew_all_secrets or
        local_tsig_key_files is defined  and (local_tsig_key_files  | length != 2) or
        remote_tsig_key_files is defined and (remote_tsig_key_files | length != 2)

- name: Delete all files in "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind" on localhost
  local_action:
    module: file
    state: "{{ item }}"
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind"
    owner: root
    group: root
    mode: 0755
  with_list: [absent, directory]
  when: renew_all_secrets
  register: local_etc_bind_delete_task

- name: Delete "*.key" and "*.private" files in "/etc/bind"
  file:
    state: absent
    path: "{{ item }}"
  with_items: "{{ remote_tsig_key_files }}"
  register: remote_etc_bind_delete_task
  when: renew_all_secrets

- name: Generate TSIG key "{{ dns_tsig_key_name }}"
  command: dnssec-keygen -a HMAC-SHA512 -b 512 -K /etc/bind -r /dev/urandom -n HOST "{{ dns_tsig_key_name }}"
  register: tsig_key_generate_task
  when: renew_all_secrets

- name: Find "*.key" and "*.private" files in "/etc/bind"
  find:
    path: /etc/bind
    use_regex: yes
    patterns: '^K.*\.(key|private)$'
    recurse: no
  register: remote_etc_bind_find_result
  when: renew_all_secrets

- name: Generate the list of "*.key" and "*.private" files in "/etc/bind"
  set_fact:
    remote_tsig_key_files: "{{ remote_etc_bind_find_result.files | map(attribute='path') | list }}"
  when: renew_all_secrets

- name: Fetch the new TSIG key files from "/etc/bind" to "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind"
  fetch:
    src: "/etc/bind/{{ item }}"
    dest: "{{ minidc_working_directory }}"
  with_items:
    - "{{ tsig_key_generate_task.stdout + '.private' }}"
    - "{{ tsig_key_generate_task.stdout + '.key' }}"
  when: renew_all_secrets

- name: Verify that the TSIG key files in "/etc/bind" are identical to those in "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind"
  fetch:
    src: "{{ item }}"
    dest: "{{ minidc_working_directory }}"
  with_items:
    - "{{ remote_tsig_key_files }}"
  when:
  - remote_tsig_key_files is defined
  - not renew_all_secrets

- name: Read ".key" file on localhost if it was renewed
  local_action:
    module: slurp
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind/{{ tsig_key_generate_task.stdout }}.key"
  register: local_tsig_key_private_file_changed
  when: renew_all_secrets

- name: Read "{{ minidc_working_directory }}/{{ inventory_hostname }}{{ remote_tsig_key_files | select('match', '^.*key$') | list | join('') }}" file on localhost if it was left unchanged
  local_action:
    module: slurp
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}{{ remote_tsig_key_files | select('match', '^.*key$') | list | join('') }}"
  register: local_tsig_key_private_file_unchanged
  when: not renew_all_secrets

- name: Extract key name and secret from "{{ minidc_working_directory }}/{{ inventory_hostname }}{{ remote_tsig_key_files | select('match', '^.*key$') | list | join('') }}" file if it was left unchanged
  set_fact:
    dns_tsig_key_secret: "{{ local_tsig_key_private_file_unchanged.content | b64decode | regex_replace('^.* IN KEY [0-9]{3} [0-9] [0-9]{3} (.*) (.*)\n$', '\\1\\2') }}"
    dns_tsig_key_name: "{{ local_tsig_key_private_file_unchanged.content | b64decode | regex_replace('^(.*)\\. IN KEY.*\n$', '\\1') }}"
  when: not renew_all_secrets

- name: Extract key name and secret from ".key" file when it was renewed
  set_fact:
    dns_tsig_key_secret: "{{ item.content | b64decode | regex_replace('^.* IN KEY [0-9]{3} [0-9] [0-9]{3} (.*) (.*)\n$', '\\1\\2') }}"
    dns_tsig_key_name: "{{ item.content | b64decode | regex_replace('^(.*)\\. IN KEY.*\n$', '\\1') }}"
  with_items:
    - "{{ local_tsig_key_private_file_changed }}"
  when: renew_all_secrets

- name: Convert TSIG key for being readable by bind and push it into "/etc/bind/named.conf.tsigkeys"
  template:
    src: "{{ role_path }}/templates/main_named.conf.tsigkeys.j2"
    dest: "/etc/bind/named.conf.tsigkeys"
    owner: root
    group: bind
    mode: 0644

- name: Fetch the converted TSIG key file from "/etc/bind/" to "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/bind" on localhost
  fetch:
    src: "/etc/bind/named.conf.tsigkeys"
    dest: "{{ minidc_working_directory }}"

################################################################################
######################### Calculate the PTR zones ##############################
################################################################################

- name: Initialize empty list for PTR zones
  set_fact:
    dns_master_ptr_zones: []

- name: Calculate the PTR zones when 1 < network mask < 9 
  set_fact:
    dns_master_ptr_zones: "{{ dns_master_ptr_zones + [ { 'ptr_zone' : item.subnet | ipaddr('revdns') | regex_replace('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.', ''), 'ns_url' : item.ns_url, 'ns_contact' : item.ns_contact, 'subnet' : item.subnet } ] }}"
  with_items: "{{ dns_master_zones.reverse }}"
  when:
    - 1 < (item.subnet | ipaddr('prefix')) < 9
  loop_control:
    label: "{{ item.subnet }}"

- name: Calculate the PTR zones when 8 < network mask < 16
  set_fact:
    dns_master_ptr_zones: "{{ dns_master_ptr_zones + [ { 'ptr_zone' : item.subnet | ipaddr('revdns') | regex_replace('^\\d{1,3}\\.\\d{1,3}\\.', ''), 'ns_url' : item.ns_url, 'ns_contact' : item.ns_contact, 'subnet' : item.subnet } ] }}"
  with_items: "{{ dns_master_zones.reverse }}"
  when:
    - 8 < (item.subnet | ipaddr('prefix')) < 17
  loop_control:
    label: "{{ item.subnet }}"

- name: Calculate the PTR zones when 16 < network mask
  set_fact:
    dns_master_ptr_zones: "{{ dns_master_ptr_zones + [ { 'ptr_zone' : item.subnet | ipaddr('revdns') | regex_replace('^\\d{1,3}\\.', ''), 'ns_url' : item.ns_url, 'ns_contact' : item.ns_contact, 'subnet' : item.subnet } ] }}"
  with_items: "{{ dns_master_zones.reverse }}"
  when:
    - 16 < (item.subnet | ipaddr('prefix'))
  loop_control:
    label: "{{ item.subnet }}"

################################################################################
################# Modify config. and dynamic zones files #######################
################################################################################

- name: Generate the "/etc/bind/named.conf.local" file
  template:
    src: "{{ role_path }}/templates/main_named.conf.local.j2"
    dest: /etc/bind/named.conf.local
    owner: root
    group: bind
    mode: 0644
  register: etc_bind_named_conf_local_task

- name: Generate dynamic forward zone files
  template:
    src: "{{ role_path }}/templates/main_db_forward.j2"
    dest: "/var/lib/bind/db.{{ item.name }}"
  with_items: "{{ dns_master_zones.forward }}"
  loop_control:
    label: "{{ item.name }}"
  register: dynamic_forward_zones_task
  when: renew_all_secrets

- name: Generate dynamic reverse zone files
  template:
    src: "{{ role_path }}/templates/main_db_reverse.j2"
    dest: "/var/lib/bind/db.{{ item.ptr_zone | regex_replace('.in-addr.arpa.', '') }}"
  with_items: "{{ dns_master_ptr_zones }}"
  loop_control:
    label: "{{ item.ptr_zone }}"
  register: dynamic_reverse_zones_task
  when: renew_all_secrets

- name: Verify bind configuration
  command: named-checkconf -z
  changed_when: False

- name: Reload bind
  systemd:
    name: bind9
    state: reloaded
  when: renew_all_secrets or
        etc_bind_named_conf_options_task.changed or
        etc_bind_named_conf_logs_task.changed or
        etc_bind_named_conf_local_task.changed or
        etc_bind_named_conf_task.changed or
        dynamic_forward_zones_task.changed or
        dynamic_reverse_zones_task.changed

################################################################################
####################### Get records from DHCP leases ###########################
################################################################################

- name: Check if the DHCP pairs are online
  connection: local
  wait_for:
    host: "{{ hostvars[item]['ansible_host'] }}"
    msg: "FAIL"
    connect_timeout: 1
    timeout: 2
    port: "{{ ansible_port }}"
  with_items: "{{ dhcp_pairs }}"
  register: check_dhcp_pairs
  failed_when: False

- name: Try to read the file "/var/lib/dhcp/dhcpd.leases" from DHCP pairs
  slurp:
    src: /var/lib/dhcp/dhcpd.leases
  with_items: "{{ check_dhcp_pairs.results }}"
  delegate_to: "{{ item.item }}"
  failed_when: False
  register: slurp_dhcp_leases_task
  when:
  - item.msg is not defined
  - item.state is defined
  - item.state == "started"
  loop_control:
    label: "{{ item.item }}"

- name: Make a list of DHCP leases
  set_fact:
    dhcp_leases_basic: "{{ item.content | b64decode | regex_findall('(?s)\\nlease.*?\\n}') | list }}"
  with_items: "{{ slurp_dhcp_leases_task.results }}"
  when:
  - item.skipped is not defined
  - "(item.msg is not defined) or (item.msg is defined and 'file not found' not in item.msg)"
  loop_control:
    label: "{{ item._ansible_delegated_vars.ansible_delegated_host + ':' + item.source }}"

- name: Remove useless data from the list of DHCP leases
  vars:
    dhcp_leases_precise: []
  set_fact:
    dhcp_leases_precise: "{{ dhcp_leases_precise + [[item | regex_search('lease .*? {') | regex_replace('lease (.*) {', '\\1'), item | regex_search('ddns-rev-name = \".*?\"') | regex_replace('.*\"(.*)\".*', '\\1'), item | regex_search('ddns-txt = \".*?\"') | regex_replace('.*\"(.*)\".*', '\\1'), item | regex_search('ddns-fwd-name = \".*?\"') | regex_replace('.*\"(.*)\".*', '\\1'), item | regex_search('client-hostname \".*?\"') | regex_replace('.*\"(.*)\".*', '\\1')]] }}"
  with_items: "{{ dhcp_leases_basic }}"
  when: dhcp_leases_basic is defined
  loop_control:
    label: "{{ item | regex_search('lease .*? {') | regex_replace('lease (.*) {', '\\1') }}"

- name: Make the lists of A and TXT records in the DHCP leases
  vars:
    a_records_in_dhcp: []
    txt_records_in_dhcp: []
  set_fact:
    a_records_in_dhcp: "{{ a_records_in_dhcp + [[(item.3 | regex_replace(item.4 + '\\.(.*)\\.', '\\1')), item.4, item.0]] }}"
    txt_records_in_dhcp: "{{ txt_records_in_dhcp + [[(item.3 | regex_replace(item.4 + '\\.(.*)\\.', '\\1')), item.4, '\"' + item.2 + '\"' ]] }}"
  with_list: "{{ dhcp_leases_precise }}"
  loop_control:
    label: '{{ item.1}}'
  when:
  - dhcp_leases_precise is defined
  - item.0 != 'None'
  - item.1 != 'None'
  - item.2 != 'None'
  - item.3 != 'None'
  - item.4 != 'None'

- name: Extract PTR records from DHCP
  vars:
    ptr_records_in_dhcp: []
  include_tasks: extract_ptr_records_from_dhcp_leases_loop1.yml
  with_items: "{{ dhcp_pairs }}"
  loop_control:
    loop_var: dhcp_pair

- name: Remove duplicate entries from DHCP leases list
  set_fact:
    a_records_in_dhcp: "{{ a_records_in_dhcp | unique }}"
    txt_records_in_dhcp: "{{ txt_records_in_dhcp | unique }}"
    ptr_records_in_dhcp: "{{ ptr_records_in_dhcp | unique }}"
  when: ptr_records_in_dhcp is defined

################################################################################
################################## Dig the DNS #################################
################################################################################

- name: Dig the forward zones
  command: "dig axfr -k {{ remote_tsig_key_files | select('match', '^.*private$') | list | join('') }} {{ item.name }}"
  with_items: "{{ dns_master_zones.forward }}"
  changed_when: False
  register: dig_forward_command
  loop_control:
    label: "{{ item.name }}"

- name: Dig the reverse zones
  command: "dig axfr -k {{ remote_tsig_key_files | select('match', '^.*private$') | list | join('') }} {{ item.ptr_zone }}"
  with_items: "{{ dns_master_ptr_zones }}"
  changed_when: False
  register: dig_reverse_command
  loop_control:
    label: "{{ item.ptr_zone }}"

################################################################################
################# Filter and refactor results coming from digs #################
################################################################################

- name: Filter A, TXT and CNAME records in the result of the dig of forward zones
  no_log: True
  vars:
    dns_a_records_temp: []
    dns_txt_records_temp: []
    dns_cname_records_temp: []
  set_fact:
    dns_a_records_temp: "{{ dns_a_records_temp + [ item.stdout_lines | map('regex_search', '.*[ \\t]A[ \\t].*') | select('string') | map('regex_replace', '^(.*)[ \\t][0-9]+[ \\t]IN[ \\t]A[ \\t](.*)$', (item.item.name + ' \\1 \\2')) | list ] | sum(start=[]) }}"
    dns_txt_records_temp: "{{ dns_txt_records_temp + [ item.stdout_lines | map('regex_search', '.*[ \\t]TXT[ \\t].*') | select('string') | map('regex_replace', '^(.*)[ \\t][0-9]+[ \\t]IN[ \\t]TXT[ \\t](.*)$', (item.item.name + ' \\1 \\2')) | list ] | sum(start=[]) }}"
    dns_cname_records_temp: "{{ dns_cname_records_temp + [ item.stdout_lines | map('regex_search', '.*[ \\t]CNAME[ \\t].*') | select('string') | map('regex_replace', '^(.*)[ \\t][0-9]+[ \\t]IN[ \\t]CNAME[ \\t](.*)$', (item.item.name + ' \\1 \\2')) | list ] | sum(start=[]) }}"
  with_items: "{{ dig_forward_command.results }}"

- name: Filter PTR records in the result of the dig of reverse zones
  no_log: True
  vars:
    dns_ptr_records_temp: []
  set_fact:
    dns_ptr_records_temp: "{{ dns_ptr_records_temp + [ item.stdout_lines | map('regex_search', '.*[ \\t]PTR[ \\t].*') | select('string') | map('regex_replace', '^(.*)[ \\t][0-9]+[ \\t]IN[ \\t]PTR[ \\t](.*)$', item.item.ptr_zone + ' \\1 \\2') | list ] | sum(start=[]) }}"
  with_items: "{{ dig_reverse_command.results }}"

- name: Refactor A records obtained from the dig
  vars:
    dns_a_records: []
  set_fact:
    dns_a_records: "{{ dns_a_records + [ (item | regex_replace('^(?P<zone>.*?) (.*?)\\.(?P=zone)\\. (.*?)$', '\\1 \\2 \\3')).split(' ') ] }}"
  with_items: "{{ dns_a_records_temp }}"

- name: Refactor TXT records obtained from the dig
  vars:
    dns_txt_records: []
  set_fact:
    dns_txt_records: "{{ dns_txt_records + [ (item | regex_replace('^(?P<zone>.*?) (.*?)\\.(?P=zone)\\. (.*?)$', '\\1 \\2 \\3')).split(' ', 2) ] }}"
  with_items: "{{ dns_txt_records_temp }}"

- name: Refactor CNAME records obtained from the dig
  vars:
    dns_cname_records: []
  set_fact:
    dns_cname_records: "{{ dns_cname_records + [ (item | regex_replace('^(?P<zone>.*?) (.*?)\\.(?P=zone)\\. (.*?)\\.(?P=zone)\\.$', '\\1 \\2 \\3')).split(' ', 2) ] }}"
  with_items: "{{ dns_cname_records_temp }}"

- name: Refactor PTR records obtained from the dig
  vars:
    dns_ptr_records: []
    dns_ptr_records_to_delete: []
  set_fact:
    dns_ptr_records: "{{ dns_ptr_records + [ (item | regex_replace('^(?P<zone>.*?) (.*?)\\.(?P=zone)\\. (.*?)$', '\\1 \\2 \\3')).split(' ') ] }}"
    dns_ptr_records_to_delete: "{{ dns_ptr_records_to_delete + [ (item | regex_replace('^(?P<zone>.*?) (.*?)\\.(?P=zone)\\. (.*?)$', '\\1 \\2 \\3')).split(' ') ] }}"
  with_items: "{{ dns_ptr_records_temp }}"

################################################################################
######################## First, we look at the A records #######################
################################################################################

- name: Read A records from inventory
  vars:
    inventory_a_records: []
  set_fact:
    inventory_a_records: "{{ inventory_a_records + [[ item.0.name, item.1.0, item.1.1 ]] }}"
  with_subelements:
    - "{{ dns_master_zones.forward }}"
    - "a_records"
  loop_control:
    label: "{{ item.0.name }} {{ item.1.0 }} {{ item.1.1 }}"

- name: Read NS records from inventory
  set_fact:
    inventory_a_records: "{{ inventory_a_records + [[item.name, item.ns_a_record | regex_replace('^(.*)\\.' + item.name + '$', '\\1'), item.ns_ip]] }}"
  with_items: "{{ dns_master_zones.forward }}" 
  loop_control:
    label: "{{ item.name }} {{item.ns_a_record }} {{ item.ns_ip }}"

# A records to add : Records in the inventory + records in the DHCP - records in the DNS
# A records to delete : Records in the DNS - records in the inventory - records in the DHCP
- name: Build lists of A records to insert into and remove from the DNS
  set_fact:
    dns_a_records_to_add: "{{ inventory_a_records | union(a_records_in_dhcp|default([])) | difference(dns_a_records|default([])) }}"
    dns_a_records_to_delete: "{{ dns_a_records | difference(inventory_a_records|default([])) | difference(a_records_in_dhcp|default([])) }}"

- name: Delete obsolote A records in forward zones
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ item.0 }}"
    record: "{{ item.1 }}"
    value: "{{ item.2 }}"
    state: "absent"
  with_list: "{{ dns_a_records_to_delete }}"
  when: dns_a_records_to_delete is defined

- name: Fill the forward zones with A records
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ item.0 }}"
    record: "{{ item.1 }}"
    value: "{{ item.2 }}"
    state: "present"
    ttl: 86400
  with_list: "{{ dns_a_records_to_add }}"
  when: dns_a_records_to_add is defined

################################################################################
####################### Next, we look at the TXT records #######################
################################################################################

- name: Read TXT records from inventory
  vars:
    inventory_txt_records: []
  set_fact:
    inventory_txt_records: "{{ inventory_txt_records + [[ item.0.name, item.1.0, item.1.1 ]] }}"
  with_subelements:
    - "{{ dns_master_zones.forward }}"
    - "txt_records"
  loop_control:
    label: "{{ item.0.name }} {{ item.1.0 }} {{ item.1.1 }}"

# TXT records to add : records in the inventory + records in the DHCP - records in the DNS
# TXT records to delete : records in the DNS - records in the inventory - records in the DHCP
- name: Build lists of TXT records to insert into and remove from the DNS
  set_fact:
    dns_txt_records_to_add: "{{ inventory_txt_records | union(txt_records_in_dhcp|default([])) | difference(dns_txt_records|default([])) }}"
    dns_txt_records_to_delete: "{{ (dns_txt_records|default([])) | difference(inventory_txt_records|default([])) | difference(txt_records_in_dhcp|default([])) }}"

- name: Delete obsolote TXT records in forward zones
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ item.0 }}"
    record: "{{ item.1 }}"
    value: "{{ item.2 }}"
    type: "TXT"
    state: "absent"
  with_list: "{{ dns_txt_records_to_delete }}"
  when: dns_txt_records_to_delete is defined

- name: Fill the forward zones with TXT records
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ item.0 }}"
    record: "{{ item.1 }}"
    value: "{{ item.2 }}"
    state: "present"
    type: "TXT"
    ttl: 86400
  with_list: "{{ dns_txt_records_to_add }}"
  when: dns_txt_records_to_add is defined

################################################################################
###################### Then, we look at the CNAME records ######################
################################################################################

- name: Read CNAME records from inventory
  vars:
    inventory_cname_records: []
  set_fact:
    inventory_cname_records: "{{ inventory_cname_records + [[ item.0.name, item.1.0, item.1.1 ]] }}"
  with_subelements:
    - "{{ dns_master_zones.forward }}"
    - "cname_records"
  loop_control:
    label: "{{ item.0.name }} {{ item.1.0 }} {{ item.1.1 }}"

# CNAME records to add : Records in the inventory - records in the DNS
# CNAME records to delete : Records in the DNS - records in the inventory
- name: Build lists of CNAME records to insert into and remove from the DNS
  set_fact:
    dns_cname_records_to_add: "{{ inventory_cname_records | difference(dns_cname_records|default([])) }}"
    dns_cname_records_to_delete: "{{ (dns_cname_records|default([])) | difference(inventory_cname_records|default([])) }}"

- name: Delete obsolote CNAME records in forward zones
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ item.0 }}"
    record: "{{ item.1 }}"
    value: "{{ item.2 }}"
    type: "CNAME"
    state: "absent"
  with_list: "{{ dns_cname_records_to_delete }}"
  when: dns_cname_records_to_delete is defined

- name: Fill the forward zones with CNAME records
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ item.0 }}"
    record: "{{ item.1 }}"
    value: "{{ item.2 }}"
    state: "present"
    type: "CNAME"
    ttl: 86400
  with_list: "{{ dns_cname_records_to_add }}"
  when: dns_cname_records_to_add is defined

################################################################################
##################### Finally, we look at the PTR records ######################
################################################################################

- name: Read PTR records from inventory
  vars:
    inventory_ptr_records: []
  set_fact:
    inventory_ptr_records: "{{ inventory_ptr_records + [[ (dns_master_ptr_zones | selectattr('subnet', 'equalto', item.0.subnet) | map(attribute='ptr_zone') | list | join('')), item.1.1 | ipaddr('revdns'), item.1.0 + '.' ]] }}"
  with_subelements:
    - "{{ dns_master_zones.reverse }}"
    - "ptr_records"
  loop_control:
    label: "{{ item.1.1 | ipaddr('revdns') }} {{ item.1.0 }}."

# PTR records to add : Records in the inventory + records in the DHCP - records in the DNS
# PTR records to delete : Records in the DNS - records in the inventory - records in the DHCP
- name: Build lists of PTR records to insert into and remove from the DNS
  set_fact:
    dns_ptr_records_to_add: "{{ inventory_ptr_records | union(ptr_records_in_dhcp|default([])) | difference(dns_ptr_records|default([])) }}"
    dns_ptr_records_to_delete: "{{ (dns_ptr_records|default([])) | difference(inventory_ptr_records|default([])) | difference(ptr_records_in_dhcp|default([])) }}"

- name: Delete obsolote PTR records in reverse zones
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ item.0 }}"
    record: "{{ item.1 }}"
    value: "{{ item.2 }}"
    state: "absent"
    type: "PTR"
  with_list: "{{ dns_ptr_records_to_delete }}"
  when: dns_ptr_records_to_delete is defined

- name: Fill the reverse zones with PTR records
  nsupdate:
    key_name: "{{ dns_tsig_key_name }}"
    key_secret: "{{ dns_tsig_key_secret }}"
    key_algorithm: "{{ dns_tsig_key_algorithm | lower }}"
    server: "{{ ansible_host }}"
    zone: "{{ item.0 }}"
    record: "{{ item.1 }}"
    value: "{{ item.2 }}"
    type: "PTR"
    ttl: 86400
  with_list: "{{ dns_ptr_records_to_add }}"
  when: dns_ptr_records_to_add is defined

#########################################################
# Scripts to automatically update DNS Zone with OVH API #
#########################################################

# Optional, only for OVH
- include_tasks: "{{ role_path }}/tasks/ovh_checkip.yml"
  when:
  - ovh_checkip_domains is defined
  - ovh_checkip_application_key is defined
  - ovh_checkip_application_secret is defined
  - ovh_checkip_consumer_key is defined
