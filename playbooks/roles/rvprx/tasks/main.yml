---
- name: Be sure the directory "/etc/nginx/sites-available" exists
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  with_items:
  - '/etc/nginx'
  - '/etc/nginx/sites-available'

# Prevent nginx from trying to listen on IPv6 and avoid error on APT module
- name: Copy "/etc/nginx/sites-available/default"
  copy:
    src: "{{ role_path }}/files/main_vhost_default"
    dest: /etc/nginx/sites-available/default
    owner: root
    group: root
    mode: 0644
  register: replace_default_vhost_task

- name: Install packages
  action: >
    apt name={{ item }} update_cache=yes cache_valid_time=3600 state=latest
  with_list:
  - nginx-full
  - sslh
  - iptables
  - iptables-persistent
  - python3-certbot
  - python3-certbot-nginx
  - tree
  - rsync

- name: Verify all packages are up-to-date
  apt:
    upgrade: yes
    force_apt_get: yes

- name: clears out the local repository of retrieved package files
  command: apt-get clean warn=false
  changed_when: false

- name: Disable default virtual host
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Generate "/etc/default/sslh"
  template:
    src: "{{ role_path }}/templates/main_sslh.j2"
    dest: /etc/default/sslh
    owner: root
    group: root
    mode: 0644
  register: modify_etc_default_sslh_task

- name: Copy unit file "/etc/systemd/system/sslh.service" for sslh service
  copy:
    src: "{{ role_path }}/files/main_sslh.service"
    dest: /etc/systemd/system/sslh.service
    owner: root
    group: root
    mode: 0644
  register: create_unit_file_for_sslh_service_task

- name: Copy unit file "/etc/systemd/system/sslh_ip_params.service" for sslh_ip_params service
  copy:
    src: "{{ role_path }}/files/main_sslh_ip_params.service"
    dest: /etc/systemd/system/sslh_ip_params.service
    owner: root
    group: root
    mode: 0644
  register: create_unit_file_for_sslh_ip_params_service_task

- name: Restart sslh service
  systemd:
    name: sslh
    state: restarted
    daemon_reload: yes
  when:
    - create_unit_file_for_sslh_service_task.changed

- name: Restart sslh_ip_params service
  systemd:
    name: sslh_ip_params
    state: restarted
    daemon_reload: yes
  when:
    - create_unit_file_for_sslh_ip_params_service_task.changed

- name: Be sure sslh and sslh_ip_params services are started and enabled
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - sslh
    - sslh_ip_params

- name: Generate "/etc/iptables/rules.v4"
  template:
    src: "{{ role_path }}/templates/main_rules.v4.j2"
    dest: /etc/iptables/rules.v4
    owner: root
    group: root
    mode: 0644
  register: modify_etc_iptables_rules_v4_task

- name: Apply iptables rules
  command: iptables-restore /etc/iptables/rules.v4
  when:
    - modify_etc_iptables_rules_v4_task.changed

- name: Restore all letsencrypt files
  synchronize:
    mode: push
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/letsencrypt"
    dest: /etc/
  when: push_config

- name: Restore all nginx files
  synchronize:
    mode: push
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/nginx"
    dest: /etc/
  when: push_config

- name: Generate "/etc/nginx/nginx.conf"
  template:
    src: "{{ role_path }}/templates/main_nginx.conf.j2"
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  register: modify_etc_nginx_conf_task

- name: Copy Virtual Host "http_to_https_redirect"
  copy:
    src: "{{ role_path }}/files/main_vhost_http_to_https_redirect"
    dest: /etc/nginx/sites-available/http_to_https_redirect
    owner: root
    group: root
    mode: 0644
  register: copy_vhost_http_to_https_redirect_task

- name: Enable vhost http_to_https_redirect
  file:
    src: /etc/nginx/sites-available/http_to_https_redirect
    dest: /etc/nginx/sites-enabled/http_to_https_redirect
    owner: root
    group: root
    state: link
  register: enable_vhost_http_to_https_redirect_task

- name: Verify if the directories for letsencrypt domains exist
  file:
    path: "/var/www/{{ item }}"
    state: directory
    owner: www-data
    group: www-data
  with_list: "{{ letsencrypt.domains }}"

- name: Verify if a letsencrypt account is already registered
  stat:
    path: /etc/letsencrypt/accounts
  register: letsencrypt_account

- name: Create a letsencrypt account
  command: certbot register --email {{ letsencrypt.contact_mail }} --agree-tos --no-eff-email
  when: not letsencrypt_account.stat.exists

- name: Verify for each vhost if the certificate exists
  stat:
    path: "/etc/letsencrypt/live/{{ item }}"
  with_list: "{{ letsencrypt.domains }}"
  register: vhost_certificate_dir

- name: Extract values from previous task
  vars:
    vhost_certificates_exist: {}
  set_fact:
    vhost_certificates_exist: "{{ vhost_certificates_exist | combine({ item.item : item.stat.exists }) }}"
  with_list: "{{ vhost_certificate_dir.results }}"
  loop_control:
    label: "{{ item.item }} : {{ item.stat.exists }}"

- name: Verify for each vhost if the file exists
  stat:
    path: "/etc/nginx/sites-available/{{ item.server_name }}"
  with_list: "{{ https_blocks }}"
  register: vhost_files

- name: Extract values from previous task
  vars:
    vhost_files_exist: {}
  set_fact:
    vhost_files_exist: "{{ vhost_files_exist | combine({ item.item.server_name : item.stat.exists }) }}"
  with_list: "{{ vhost_files.results }}"
  loop_control:
    label: "{{ item.item.server_name }} : {{ item.stat.exists }}"

- name: Copy all the vhosts without certificates
  template:
    src: "{{ role_path }}/templates/main_vhost_template_without_certs.j2"
    dest: "/etc/nginx/sites-available/{{ item.server_name }}"
    owner: root
    group: root
  with_list: "{{ https_blocks }}"
  when:
  - vhost_certificates_exist[item.server_name] is not defined or
    not vhost_certificates_exist[item.server_name]
  - vhost_files_exist[item.server_name] is not defined or
    not vhost_files_exist[item.server_name]
  register: copy_vhosts_without_certs_task

#- name: Copy all the vhosts with certificates
#  template:
#    src: "{{ role_path }}/templates/main_vhost_template_with_certs.j2"
#    dest: "/etc/nginx/sites-available/{{ item.server_name }}"
#    owner: root
#    group: root
#  with_list: "{{ https_blocks }}"
#  when:
#  - vhost_certificates_exist[item.server_name] is defined
#  - vhost_certificates_exist[item.server_name]
#  register: copy_vhosts_with_certs_task

- name: Enable all the vhosts
  file:
    src: "/etc/nginx/sites-available/{{ item.server_name }}"
    dest: "/etc/nginx/sites-enabled/{{ item.server_name }}"
    owner: root
    group: root
    state: link
  with_list: "{{ https_blocks }}"
  register: enable_vhosts_task

- name: Restart nginx service
  systemd:
    name: nginx
    state: restarted
  when:
    - modify_etc_nginx_conf_task.changed or
      copy_vhost_http_to_https_redirect_task.changed or
      enable_vhost_http_to_https_redirect_task.changed or
      copy_vhosts_without_certs_task.changed or
      enable_vhosts_task.changed
#      copy_vhosts_with_certs_task.changed or

- name: Create certificates
  command: certbot -n --nginx -w /var/www/{{ item }} -d {{ item }}
  with_list: "{{ letsencrypt.domains }}"
  when: vhost_certificates_exist[item] is not defined or
        not vhost_certificates_exist[item]

- name: Override certbot.service
  copy:
    content: |
      [Unit]
      Description=Certbot
      Documentation=file:///usr/share/doc/python-certbot-doc/html/index.html
      Documentation=https://letsencrypt.readthedocs.io/en/latest/

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/certbot -q renew --renew-hook "systemctl restart nginx.service"
      PrivateTmp=true
    dest: /etc/systemd/system/certbot.service
    owner: root
    group: root
    mode: 0644

- name: Override certbot.timer 
  copy:
    content: |
      [Unit]
      Description=Run certbot twice daily

      [Timer]
      OnCalendar=*-*-* 00,12:00:00
      RandomizedDelaySec=7200
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /etc/systemd/system/certbot.timer
    owner: root
    group: root
    mode: 0644

- name: Enable and start systemd timer "certbot.timer"
  systemd:
    daemon-reload: yes
    name: certbot.timer
    enabled: yes
    state: started

- name: Delete cron file for certbot
  file:
    path: /etc/cron.d/certbot
    state: absent

- name: Be sure backup directory exists on localhost
  local_action:
    module: file
    state: directory
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/"

- name: Backup all letsencrypt files
  synchronize:
    mode: pull
    src: /etc/letsencrypt
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/"
  when: not push_config

- name: Backup all nginx files
  synchronize:
    mode: pull
    src: /etc/nginx
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/"
  when: not push_config
