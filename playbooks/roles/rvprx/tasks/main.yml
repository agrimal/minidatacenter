---
- name: Be sure the directory "/etc/nginx/sites-available" exists
  file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  with_items:
  - '/etc/nginx'
  - '/etc/nginx/sites-available'

# Prevent nginx from trying to listen on IPv6 and avoid error on APT module
- name: Copy "/etc/nginx/sites-available/default"
  copy:
    src: "{{ role_path }}/files/main_vhost_default"
    dest: /etc/nginx/sites-available/default
    owner: root
    group: root
    mode: 0644
  register: replace_default_vhost_task

- name: Install packages
  action: >
    apt name={{ item }} update_cache=yes cache_valid_time=3600 state=latest
  with_list:
  - nginx-full
  - sslh
  - iptables
  - iptables-persistent
  - python3-certbot
  - python3-certbot-nginx
  failed_when: false

- name: Verify all packages are up-to-date
  apt:
    upgrade: yes
    force_apt_get: yes
  failed_when: false

- name: clears out the local repository of retrieved package files
  command: apt-get clean warn=false
  changed_when: false

- name: Disable default virtual host
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Generate "/etc/default/sslh"
  template:
    src: "{{ role_path }}/templates/main_sslh.j2"
    dest: /etc/default/sslh
    owner: root
    group: root
    mode: 0644
  register: modify_etc_default_sslh_task

- name: Copy unit file "/etc/systemd/system/sslh.service" for sslh service
  copy:
    src: "{{ role_path }}/files/main_sslh.service"
    dest: /etc/systemd/system/sslh.service
    owner: root
    group: root
    mode: 0644
  register: create_unit_file_for_sslh_service_task

- name: Copy unit file "/etc/systemd/system/sslh_ip_params.service" for sslh_ip_params service
  copy:
    src: "{{ role_path }}/files/main_sslh_ip_params.service"
    dest: /etc/systemd/system/sslh_ip_params.service
    owner: root
    group: root
    mode: 0644
  register: create_unit_file_for_sslh_ip_params_service_task

- name: Restart sslh service
  systemd:
    name: sslh
    state: restarted
    daemon_reload: yes
  when:
    - create_unit_file_for_sslh_service_task.changed

- name: Restart sslh_ip_params service
  systemd:
    name: sslh_ip_params
    state: restarted
    daemon_reload: yes
  when:
    - create_unit_file_for_sslh_ip_params_service_task.changed

- name: Be sure sslh and sslh_ip_params services are started and enabled
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - sslh
    - sslh_ip_params

- name: Generate "/etc/iptables/rules.v4"
  template:
    src: "{{ role_path }}/templates/main_rules.v4.j2"
    dest: /etc/iptables/rules.v4
    owner: root
    group: root
    mode: 0644
  register: modify_etc_iptables_rules_v4_task

- name: Apply iptables rules
  command: iptables-restore /etc/iptables/rules.v4
  when:
    - modify_etc_iptables_rules_v4_task.changed

- name: Restore all letsencrypt files
  synchronize:
    mode: push
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/letsencrypt"
    dest: /etc/
  when: push_config

- name: Restore all nginx files
  synchronize:
    mode: push
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/nginx"
    dest: /etc/
  when: push_config

- name: Generate "/etc/nginx/nginx.conf"
  template:
    src: "{{ role_path }}/templates/main_nginx.conf.j2"
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  register: modify_etc_nginx_conf_task

#- name: Copy Virtual Host "http_to_https_redirect"
#  copy:
#    src: "{{ role_path }}/files/main_vhost_http_to_https_redirect"
#    dest: /etc/nginx/sites-available/http_to_https_redirect
#    owner: root
#    group: root
#    mode: 0644
#  register: copy_vhost_http_to_https_redirect_task
#
#- name: Enable vhost http_to_https_redirect
#  file:
#    src: /etc/nginx/sites-available/http_to_https_redirect
#    dest: /etc/nginx/sites-enabled/http_to_https_redirect
#    owner: root
#    group: root
#    state: link
#  register: enable_vhost_http_to_https_redirect_task

- name: Create the directories in "/var/www/..." for each letsencrypt domain
  file:
    path: "/var/www/{{ item.domains.0 }}"
    state: directory
    owner: www-data
    group: www-data
  with_list: "{{ letsencrypt.domains }}"

- name: Verify if a letsencrypt account is already registered
  stat:
    path: /etc/letsencrypt/accounts
  register: letsencrypt_account

- name: Create a letsencrypt account
  command: certbot register --email {{ letsencrypt.contact_mail }} --agree-tos --no-eff-email
  when: not letsencrypt_account.stat.exists

- name: Verify for each wanted certificate if the primary certificate already exists in "/etc/letsencrypt/live/"
  stat:
    path: "/etc/letsencrypt/live/{{ item.domains.0 }}"
  with_list: "{{ letsencrypt.domains }}"
  register: vhost_certificate_dir

- name: Extract values from previous task
  set_fact:
    vhost_certificates_exist: "{{ vhost_certificates_exist | default ({}) | combine({ item.item.domains.0 : item.stat.exists }) }}"
  with_list: "{{ vhost_certificate_dir.results }}"
  loop_control:
    label: "{{ item.item.domains.0 }} : {{ item.stat.exists }}"

- name: Verify for each primary certificate already existing if the alternative names are correct
  command: openssl x509 -in /etc/letsencrypt/live/{{ item.key }}/cert.pem -noout -text
  with_dict: "{{ vhost_certificates_exist }}"
  when: item.value
  register: list_alt_names_command
  changed_when: false

- name: Create the list of existing primary / alternative names
  set_fact:
    list_existing_primary_alternative_names: "{{ list_existing_primary_alternative_names | default([]) + ((item.stdout | regex_replace('(?s)^.*?\\s+(DNS:.+?)\\n.*$', '\\1') | regex_replace('DNS:', '')).split(', ') | map('regex_replace', '^(.*)$', '\\1,' + item.item.key) | list ) }}"
  with_list: "{{ list_alt_names_command.results }}"
  when: item.stdout is defined
  #register: list_existing_primary_alternative_names_task
  loop_control:
    label: "{{ item.item.key }}"

- name: Flatten the list of existing primary / alternative names
  set_fact:
    dict_existing_primary_alternative_names: "{{ dict_existing_primary_alternative_names | default({}) | combine({ item.split(',').0 : item.split(',').1 }) }}"
  with_list: "{{ list_existing_primary_alternative_names }}"
  when: list_existing_primary_alternative_names is defined

- name: Create the list of missing certificates
  set_fact:
    list_missing_certificates: "{{ list_missing_certificates | default([]) + [[item.1, item.0.cert_id]] }}"
  with_subelements:
  - "{{ letsencrypt.domains }}"
  - domains
  when:
  - dict_existing_primary_alternative_names is not defined or
    dict_existing_primary_alternative_names is defined and
    dict_existing_primary_alternative_names[item.1] is not defined

- name: Verify for each nginx vhost if the file exists in "/etc/nginx/sites-available"
  stat:
    path: "/etc/nginx/sites-available/{{ item.server_name }}"
  with_list: "{{ https_blocks }}"
  register: vhost_files

- name: Extract values from previous task
  set_fact:
    vhost_files_exist: "{{ vhost_files_exist | default({}) | combine({ item.item.server_name : item.stat.exists }) }}"
  with_list: "{{ vhost_files.results }}"
  loop_control:
    label: "{{ item.item.server_name }} : {{ item.stat.exists }}"

- name: Create all the nginx vhosts that don't already have certificate
  template:
    src: "{{ role_path }}/templates/main_vhost_template_without_certs.j2"
    dest: "/etc/nginx/sites-available/{{ item.server_name }}"
    owner: root
    group: root
  with_list: "{{ https_blocks }}"
  when:
  - list_missing_certificates is defined
  - item.server_name in (list_missing_certificates | map("first") | list)
  register: copy_vhosts_without_certs_task

- name: Create all the nginx vhosts that already have certificate
  template:
    src: "{{ role_path }}/templates/main_vhost_template_with_certs.j2"
    dest: "/etc/nginx/sites-available/{{ item.server_name }}"
    owner: root
    group: root
  with_list: "{{ https_blocks }}"
  when:
  - list_missing_certificates is not defined or
    item.server_name not in (list_missing_certificates | map("first") | list)
  register: copy_vhosts_with_certs_task

- name: Enable all the vhosts
  file:
    src: "/etc/nginx/sites-available/{{ item.server_name }}"
    dest: "/etc/nginx/sites-enabled/{{ item.server_name }}"
    owner: root
    group: root
    state: link
  with_list: "{{ https_blocks }}"
  register: enable_vhosts_task

- name: Restart nginx service
  systemd:
    name: nginx
    state: restarted
  when:
    - modify_etc_nginx_conf_task.changed or
      copy_vhosts_without_certs_task.changed or
      enable_vhosts_task.changed or
      copy_vhosts_with_certs_task.changed
      #copy_vhost_http_to_https_redirect_task.changed or
      #enable_vhost_http_to_https_redirect_task.changed or

- name: Create dictionary of wanted certificates
  set_fact:
    dict_wanted_primary_alternative_names: "{{ dict_wanted_primary_alternative_names | default({}) | combine({ item.1 : (letsencrypt.domains | selectattr('cert_id', 'equalto', item.0.cert_id) | list).0.domains.0 }) }}"
  with_subelements:
  - "{{ letsencrypt.domains }}"
  - domains

- name: Create certificates
  command: certbot --non-interactive --nginx certonly --webroot-path /var/www/{{ dict_wanted_primary_alternative_names[item.0] }} --domain {{ (letsencrypt.domains | selectattr('cert_id', 'equalto', item.1) | list).0.domains | join( ' --domain ') }} --expand
  with_list: "{{ list_missing_certificates }}"
  when: list_missing_certificates is defined
  register: create_certificates

#- name: Enable vhost http_to_https_redirect
#  file:
#    src: /etc/nginx/sites-available/http_to_https_redirect
#    dest: /etc/nginx/sites-enabled/http_to_https_redirect
#    owner: root
#    group: root
#    state: link
#  register: enable_vhost_http_to_https_redirect_task
#  when: create_certificates.changed

#- name: Reload nginx service
#  systemd:
#    name: nginx
#    state: reloaded
#  when: enable_vhost_http_to_https_redirect_task.changed

- name: Override certbot.service
  copy:
    src: "{{ role_path }}/files/main_certbot.service"
    dest: /etc/systemd/system/certbot.service
    owner: root
    group: root
    mode: 0644

- name: Override certbot.timer 
  copy:
    src: "{{ role_path }}/files/main_certbot.timer"
    dest: /etc/systemd/system/certbot.timer
    owner: root
    group: root
    mode: 0644

- name: Enable and start systemd timer "certbot.timer"
  systemd:
    daemon-reload: yes
    name: certbot.timer
    enabled: yes
    state: started

- name: Delete cron file for certbot
  file:
    path: /etc/cron.d/certbot
    state: absent

- name: Be sure backup directory exists on localhost
  local_action:
    module: file
    state: directory
    path: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/"

- name: Backup all letsencrypt files
  synchronize:
    mode: pull
    src: /etc/letsencrypt
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/"
  when: not push_config

- name: Backup all nginx files
  synchronize:
    mode: pull
    src: /etc/nginx
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}/etc/"
  when: not push_config

- name: Create a service on the container host to synchronize letsencrypt certificates
  local_action:
    module: template
    src: "{{ role_path }}/templates/sync-certs-from-rvprx@.service.j2"
    dest: /etc/systemd/system/sync-certs-from-rvprx@.service
    owner: root
    group: root
    mode: 0644
  run_once: true

- name: Create a timer on the container host to synchronize letsencrypt certificates
  local_action:
    module: copy
    src: "{{ role_path }}/files/main_sync-certs-from-rvprx@.timer"
    dest: /etc/systemd/system/sync-certs-from-rvprx@.timer
    owner: root
    group: root
    mode: 0644
  run_once: true

- name: Enable and start sync-certs-from-rvprx@.timer
  local_action:
    daemon-reload: yes
    module: systemd
    name: "sync-certs-from-rvprx@{{ inventory_hostname }}.timer"
    state: started
    enabled: yes

- name: Create a systemd service on localhost to push letsencrypt certificates into containers
  local_action:
    module: template
    src: "{{ role_path }}/templates/sync-certs-CERTIFICATE-to-container@.service.j2"
    dest: "/etc/systemd/system/sync-certs-{{ (letsencrypt.domains | selectattr('cert_id', 'equalto', item.cert_id) | list).0.domains.0 }}-to-container@.service"
    owner: root
    group: root
    mode: 0644
  with_list: "{{ synced_certs }}"

- name: Create a systemd timer on localhost to push letsencrypt certificates into containers
  local_action:
    module: template
    src: "{{ role_path }}/templates/sync-certs-CERTIFICATE-to-container@.timer.j2"
    dest: "/etc/systemd/system/sync-certs-{{ (letsencrypt.domains | selectattr('cert_id', 'equalto', item.cert_id) | list).0.domains.0 }}-to-container@.timer"
    owner: root
    group: root
    mode: 0644
  with_list: "{{ synced_certs }}"

- name: Enable and start systemd timers to push letsencrypt certificates into containers
  local_action:
    daemon-reload: yes
    module: systemd
    name: "sync-certs-{{ (letsencrypt.domains | selectattr('cert_id', 'equalto', item.cert_id) | list).0.domains.0 }}-to-container@{{ item.host }}.timer"
    state: started
    enabled: yes
  with_list: "{{ synced_certs }}"

- name: Create a "restart_service@service" to restart other services when certificates are updated
  copy:
    src: "{{ role_path }}/files/restart_service@.service"
    dest: /etc/systemd/system/restart_service@.service
    owner: root
    group: root
    mode: 0644
  delegate_to: "{{ item.host }}"
  with_list: "{{ synced_certs }}"

- name: Create a "restart_service@.path" to restart other services when private key is updated
  template:
    src: "{{ role_path }}/templates/restart_service@.path.j2"
    dest: /etc/systemd/system/restart_service@.path
    owner: root
    group: root
    mode: 0644
  delegate_to: "{{ item.host }}"
  with_list: "{{ synced_certs }}"

- name: Enable and start restart_service@.path
  systemd:
    daemon-reload: yes
    name: "restart_service@{{ item.1 }}.path"
    state: started
    enabled: yes
  delegate_to: "{{ item.0.host }}"
  with_subelements:
  - "{{ synced_certs }}"
  - restart_services
