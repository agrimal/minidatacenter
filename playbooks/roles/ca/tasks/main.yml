---
- name: Define EasyRSA source directory as '/usr/share/easy-rsa'
  set_fact:
    easy_rsa_source_dir: "/usr/share/easy-rsa"

- name: Install packages
  action: >
    apt name={{ item }} update_cache=yes cache_valid_time=3600 state=latest
  with_list:
  - easy-rsa
  - rsync

- name: Verify all packages are up-to-date
  apt:
    upgrade: yes
    force_apt_get: yes

- name: clears out the local repository of retrieved package files
  command: apt-get clean warn=false
  changed_when: false

- name: Create the directory "{{ ca_easy_rsa_install_dir }}" 
  file:
    path: "{{ ca_easy_rsa_install_dir }}"
    state: directory
    mode: 0750

- name: List files and directories in "{{ easy_rsa_source_dir }}"
  find:
    path: "{{ easy_rsa_source_dir }}"
    recurse: yes
    file_type: any
  register: find_result_easy_rsa_source_dir

- name: Create in "{{ ca_easy_rsa_install_dir }}" the directories found in "{{ easy_rsa_source_dir }}" 
  file:
    path: "{{ item.path | regex_replace(easy_rsa_source_dir, ca_easy_rsa_install_dir) }}"
    state: directory
    mode: "{{ item.mode }}"
  with_list: "{{ find_result_easy_rsa_source_dir.files }}"
  loop_control:
    label: "{{ item.path }}"  
  when: item.isdir

- name: Copy the files (except 'vars') from "{{ easy_rsa_source_dir }}" to "{{ ca_easy_rsa_install_dir }}"
  copy:
    remote_src: yes
    src: "{{ item.path }}"
    dest: "{{ item.path | regex_replace(easy_rsa_source_dir, ca_easy_rsa_install_dir) }}"
    mode: "{{ item.mode }}"
  with_list: "{{ find_result_easy_rsa_source_dir.files }}"
  loop_control:
    label: "{{ item.path }}"  
  when:
  - not item.isdir
  - item.path != (easy_rsa_source_dir + "/vars")
  - item.path != (easy_rsa_source_dir + "/openssl-1.0.0.cnf")

- name: Create the directory "keys" in "{{ ca_easy_rsa_install_dir }}"
  file:
    path: "{{ ca_easy_rsa_install_dir }}/keys"
    state: directory
    mode: 0700
  register: create_easy_rsa_keys_directory_task

- name: Copy "{{ minidc_working_directory }}/{{ inventory_hostname }}{{ ca_easy_rsa_install_dir }}/keys" (localhost) into "{{ ca_easy_rsa_install_dir }}/keys }}" (container)
  synchronize:
    mode: push
    archive: yes
    delete: yes
    src: "{{ minidc_working_directory }}/{{ inventory_hostname }}{{ ca_easy_rsa_install_dir }}/keys"
    dest: "{{ ca_easy_rsa_install_dir }}"
  when: push_data_from_minidc_working_directory

- name: Copy the 'vars' file from local template into "{{ ca_easy_rsa_install_dir }}"
  template:
    src: "{{ role_path }}/templates/main_vars.j2"
    dest: "{{ ca_easy_rsa_install_dir }}/vars"
    owner: root
    group: root
    mode: 0644

- name: Copy the "openssl-1.0.0.cnf" file
  copy:
    src: "{{ role_path }}/files/main_openssl-1.0.0.cnf"
    dest: "{{ ca_easy_rsa_install_dir }}/openssl-1.0.0.cnf"
    owner: root
    group: root
    mode: 0644

- name: Clean all previously generated keys and certificates
  shell: . vars && ./clean-all
  args:
    chdir: "{{ ca_easy_rsa_install_dir }}"
    executable: /bin/bash
  when: renew_all_secrets

- name: List files in "{{ ca_easy_rsa_install_dir }}/keys"
  find:
    path: "{{ ca_easy_rsa_install_dir }}/keys"
    recurse: no
    file_type: file
  register: find_result_ca_easy_rsa_install_dir_keys

- name: Create the list of files present in "{{ ca_easy_rsa_install_dir }}/keys"
  set_fact:
    files_in_keys_directory: "{{ find_result_ca_easy_rsa_install_dir_keys.files | map(attribute='path') | list }}"

- name: Generate the CA private key and certificate
  shell: source vars && ./clean-all && ./pkitool --initca
  args:
    chdir: "{{ ca_easy_rsa_install_dir }}"
    executable: /bin/bash
  when: (ca_easy_rsa_install_dir + "/keys/ca.crt") not in files_in_keys_directory or
        (ca_easy_rsa_install_dir + "/keys/ca.key") not in files_in_keys_directory or
        (ca_easy_rsa_install_dir + "/keys/index.txt") not in files_in_keys_directory

- name: Generate the Diffie-Hellman key
  shell: source vars && ./build-dh
  args:
    chdir: "{{ ca_easy_rsa_install_dir }}"
    executable: /bin/bash
  async: 600
  poll: 0
  register: diffie_hellman_generation
  when: (ca_easy_rsa_install_dir + "/keys/dh" + ca_key_size | string + ".pem") not in files_in_keys_directory

- name: Read "{{ ca_easy_rsa_install_dir }}/keys/index.txt"
  slurp:
    src: "{{ ca_easy_rsa_install_dir }}/keys/index.txt"
  register: index_txt

- name: Generate the list of the certificates still valid for the ca
  set_fact:
    valid_certificates_for_ca: "{{ index_txt['content'] | b64decode | regex_findall('V\t.*\n') | map('regex_replace', '^V.*/CN=(.*)/name=.*\n$', '\\1') | list }}"
    revoked_certificates_for_ca: "{{ index_txt['content'] | b64decode | regex_findall('R\t.*\n') | map('regex_replace', '^R.*/CN=(.*)/name=.*\n$', '\\1') | list }}"

- name: Generate the servers private keys and certificates
  shell: . vars && ./pkitool --server "{{ item }}"
  args:
    chdir: "{{ ca_easy_rsa_install_dir }}"
    executable: /bin/bash
  with_list: "{{ ca_certificates.servers }}"
  when: (ca_easy_rsa_install_dir + "/keys/" + item + ".key") not in files_in_keys_directory or
        (ca_easy_rsa_install_dir + "/keys/" + item + ".crt") not in files_in_keys_directory or
        item not in valid_certificates_for_ca

- name: Generate the clients private keys and certificates
  shell: source vars && ./pkitool "{{ item }}"
  args:
    chdir: "{{ ca_easy_rsa_install_dir }}"
    executable: /bin/bash
  with_list: "{{ ca_certificates.clients }}"
  when: (ca_easy_rsa_install_dir + "/keys/" + item + ".key") not in files_in_keys_directory or
        (ca_easy_rsa_install_dir + "/keys/" + item + ".crt") not in files_in_keys_directory or
        item not in valid_certificates_for_ca

- name: Find all CSR files
  find:
    paths: '{{ ca_easy_rsa_install_dir }}/keys'
    patterns: '*.csr'
    use_regex: no
  register: find_csr_files_task

- name: Delete CSR files
  file:
    path: '{{ item.path }}'
    state: absent
  with_list: '{{ find_csr_files_task.files }}'
  loop_control:
    label: '{{ item.path }}'

- name: Revoke the certificates removed from config file
  shell: source vars && ./revoke-full "{{ item }}"
  args:
    chdir: "{{ ca_easy_rsa_install_dir }}"
    executable: /bin/bash
  with_list: "{{ valid_certificates_for_ca }}"
  when:
  - item not in ca_certificates.servers
  - item not in ca_certificates.clients
  register: revoke_result
  failed_when: revoke_result.rc != 2

- name: Waiting for Diffie-Hellman key to be generated
  async_status:
    jid: "{{ diffie_hellman_generation.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 120
  delay: 5
  when: diffie_hellman_generation.changed

- name: test
  fetch:
    src: "{{ ca_easy_rsa_install_dir }}/vars"
    dest: "{{ minidc_working_directory }}"
  when: not push_data_from_minidc_working_directory

- name: Copy files from "{{ ca_easy_rsa_install_dir }}/keys }}" (container) into "{{ minidc_working_directory }}/{{ inventory_hostname }}{{ ca_easy_rsa_install_dir }}/keys" (localhost)
  synchronize:
    mode: pull
    archive: yes
    delete: yes
    src: "{{ ca_easy_rsa_install_dir }}/keys"
    dest: "{{ minidc_working_directory }}/{{ inventory_hostname }}{{ ca_easy_rsa_install_dir }}"
  when: not push_data_from_minidc_working_directory
